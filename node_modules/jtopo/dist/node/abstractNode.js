'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _element = require('../element');

var _element2 = _interopRequireDefault(_element);

var _tips = require('./tips');

var _tips2 = _interopRequireDefault(_tips);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let ImageCache = {};
let AbstractNode = class AbstractNode extends _element2.default {
	constructor(option) {
		super();

		this.getName = function () {
			return this.name;
		};

		this.setName = function (n) {
			this.name = n;
			return this;
		};

		this.getImage = function () {
			return this.image;
		};

		this.setImage = function (i) {
			let node = this;
			if (typeof i == 'string') {
				let img = this.image = new Image();
				this.image.onload = function () {
					node.setSize(img.width, img.height);
				};
				this.image.src = i;
			} else {
				this.image = i;
			}
		};

		this.getTypeImage = function (type) {
			let typeImages = {
				'zone': './img/zone.png',
				'host': './img/host.png',
				'vm': './img/vm.png'
			};
			if (ImageCache[type]) {
				return ImageCache[type];
			}
			let src = typeImages[type];
			if (src == null) return null;

			let image = new Image();
			image.src = src;
			return ImageCache[type] = image;
		};

		this.getType = function () {
			return this.type;
		};

		this.setType = function (type) {
			this.type = type;
			this.setImage(this.getTypeImage(type));
		};

		this.id = option.id || null;
		this.x = option.x || 0;
		this.y = option.y || 0;
		this.width = option.width || 0;
		this.height = option.height || 0;
		this.visible = option.visible || true;
		this.dragable = option.dragable || true;
		this.text = option.text || option.name || '';
		this.name = option.name || '';
		this.image = option.image || null;
		this.color = option.color || null;
		this.layout = option.layout || null;
		this.gravitate = option.gravitate || null; //function(){};
		this.parentContainer = option.parentContainer || null;
		this.inContainer = option.inContainer || null;
		this.outContainer = option.outContainer || null;
		this.fixed = option.fixed || false;
		this.tip = new _tips2.default(option.tip || {});
	}

	draw(ctx) {}

};
exports.default = AbstractNode;