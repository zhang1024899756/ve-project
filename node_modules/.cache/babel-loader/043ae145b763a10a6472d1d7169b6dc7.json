{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar Util = {\n  drawStart: function drawStart(ctx) {\n    ctx.save();\n    ctx.beginPath();\n  },\n  drawEnd: function drawEnd() {\n    ctx.stroke();\n    ctx.closePath();\n    ctx.restore();\n  },\n  getDistance: function getDistance(p1, p2) {\n    var dx = p2.x - p1.x;\n    var dy = p2.y - p1.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  },\n  mouseCoords: function mouseCoords(event) {\n    if (event.pageX || event.pageY) {\n      return {\n        x: event.pageX,\n        y: event.pageY\n      };\n    }\n\n    return {\n      x: event.clientX + document.body.scrollLeft - document.body.clientLeft,\n      y: event.clientY + document.body.scrollTop - document.body.clientTop\n    };\n  },\n  getXY: function getXY(box, event) {\n    event = event || mouseCoords(window.event);\n    var x = document.body.scrollLeft + (event.x || event.layerX);\n    var y = document.body.scrollTop + (event.y || event.layerY);\n    return {\n      x: x - box.offset.left,\n      y: y - box.offset.top\n    };\n  },\n  rotatePoint: function rotatePoint(bx, by, x, y, angle) {\n    var dx = x - bx;\n    var dy = y - by;\n    var r = Math.sqrt(dx * dx + dy * dy);\n    var a = Math.atan2(dy, dx) + angle;\n    return {\n      x: bx + Math.cos(a) * r,\n      y: by + Math.sin(a) * r\n    };\n  },\n  rotatePoints: function rotatePoints(target, points, angle) {\n    var result = [];\n\n    for (var i = 0; i < points.length; i++) {\n      var p = rotatePoint(target.x, target.y, points[i].x, points[i].y, angle);\n      result.push(p);\n    }\n\n    return result;\n  }\n};\n\nvar MessageBus =\n/*#__PURE__*/\nfunction () {\n  function MessageBus(name) {\n    _classCallCheck(this, MessageBus);\n\n    this.name = name;\n    this.messageMap = {};\n    this.messageCount = 0;\n  }\n\n  _createClass(MessageBus, [{\n    key: \"subscribe\",\n    value: function subscribe(topic, action) {\n      if (!typeof topic == 'string') {\n        this.subscribes(topic, action);\n      } else {\n        var actions = this.messageMap[topic];\n\n        if (actions == null) {\n          this.messageMap[topic] = [];\n        }\n\n        this.messageMap[topic].push(action);\n        this.messageCount++;\n      }\n    }\n  }, {\n    key: \"subscribes\",\n    value: function subscribes(topics, action) {\n      var results = [];\n      var counter = 0;\n\n      for (var i = 0; i < topics.length; i++) {\n        var actionProxy = function actionProxy(result) {\n          results[i] = result;\n          counter++;\n\n          if (counter == topics.length) {\n            counter = 0;\n            return action.apply(null, results);\n          } else {\n            return null;\n          }\n        };\n\n        var topic = topics[i];\n        var actions = this.messageMap[topic];\n\n        if (actions == null) {\n          this.messageMap[topic] = [];\n        }\n\n        ;\n        this.messageMap[topic].push(actionProxy);\n        this.messageCount++;\n      }\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(topic) {\n      var actions = this.messageMap[topic];\n\n      if (actions != null) {\n        this.messageMap[topic] = null;\n        delete this.messageMap[topic];\n        this.messageCount--;\n      }\n    }\n  }, {\n    key: \"publish\",\n    value: function publish(topic, data, concurrency) {\n      var actions = this.messageMap[topic];\n\n      if (actions != null) {\n        for (var i = 0; i < actions.length; i++) {\n          if (concurrency) {\n            (function (action, data) {\n              setTimeout(function () {\n                action(data);\n              }, 10);\n            })(actions[i], data);\n          } else {\n            actions[i](data);\n          }\n        }\n      }\n    }\n  }]);\n\n  return MessageBus;\n}();\n\nexports.default = _extends({\n  MessageBus: MessageBus\n}, Util);","map":null,"metadata":{},"sourceType":"script"}