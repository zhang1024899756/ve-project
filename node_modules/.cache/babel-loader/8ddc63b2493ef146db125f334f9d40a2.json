{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _util = require('./util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _node = require('./node');\n\nvar _container = require('./container');\n\nvar _link = require('./link');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Stage =\n/*#__PURE__*/\nfunction () {\n  function Stage(option) {\n    _classCallCheck(this, Stage);\n\n    this.name = option.name || '';\n    this.canvas = option.canvas;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.messageBus = new _util2.default.MessageBus();\n    this.image = new Image();\n    this.image.src = option.imageSrc || '';\n    this.scale = 1;\n    this.isScale = option.isScale || false;\n    this.maxScale = 4;\n    this.minScale = 0.5;\n    this.init();\n    this.contextMenu = option.contextMenu || null;\n  }\n\n  _createClass(Stage, [{\n    key: \"init\",\n    value: function init() {\n      this.ctx.shadowBlur = 5;\n      this.ctx.shadowColor = 'rgba(0,0,0,0.5)';\n      this.ctx.shadowOffsetX = 3;\n      this.ctx.shadowOffsetY = 6;\n      this.ctx.scale(this.scale, this.scale);\n      this.startDragMouseX = 0;\n      this.startDragMouseY = 0;\n      this.offset = this.canvas.getBoundingClientRect(); // this.offset = canvas.offset();\n\n      this.isRangeSelectable = true;\n      this.elements = [];\n      this.containers = [];\n      this.links = [];\n      this.nodes = [];\n      this.elementMap = {};\n      this.selectedElements = [];\n      var box = this;\n\n      this.canvas.onmousedown = function (event) {\n        box.isMousedown = true;\n        box.canvas.style.cursor = 'move';\n        box.mousedown(event);\n        event.preventDefault();\n      };\n\n      this.canvas.onresize = function (event) {\n        box.offset = box.canvas.getBoundingClientRect();\n      };\n\n      this.canvas.onmousemove = function (event) {\n        box.mousemove(event);\n      };\n\n      this.canvas.onmouseup = function (event) {\n        box.isMousedown = false;\n        box.canvas.style.cursor = 'default';\n        box.mouseup(event);\n      };\n\n      if (this.isScale) {\n        this.canvas.onmousewheel = function (event) {\n          event = event || window.event;\n          box.mousewheel(event);\n          event.preventDefault();\n          box.updateView();\n        };\n      }\n\n      if (this.contextMenu) {\n        this.canvas.oncontextmenu = function (event) {\n          event = event || window.event;\n          box.contextmenu(event);\n          event.preventDefault();\n          return false;\n        };\n      }\n\n      try {\n        // IE !!\n        window.addEventListener('keydown', function (e) {\n          box.keydown(e);\n          e.preventDefault();\n        }, true);\n        window.addEventListener('keyup', function (e) {\n          box.keyup(e);\n          e.preventDefault();\n        }, true);\n      } catch (e) {}\n\n      setTimeout(function () {\n        box.offset = box.canvas.getBoundingClientRect();\n        box.updateView();\n      }, 300);\n    }\n  }, {\n    key: \"attachMousewheel\",\n    value: function attachMousewheel() {\n      var box = this;\n\n      this.canvas.onmousewheel = function (event) {\n        event = event || window.event;\n        box.mousewheel(event);\n        event.preventDefault();\n        box.updateView();\n      };\n\n      this.isScale = true;\n    }\n  }, {\n    key: \"cancleMousewheel\",\n    value: function cancleMousewheel() {\n      this.canvas.onmousewheel = null;\n      this.isScale = false;\n    }\n  }, {\n    key: \"getElementByXY\",\n    value: function getElementByXY(x, y) {\n      var e = null;\n\n      for (var i = this.nodes.length - 1; i >= 0; i--) {\n        var node = this.nodes[i];\n\n        if (x > node.x && x < node.x + node.width && y > node.y && y < node.y + node.height) {\n          e = node;\n          break;\n        }\n      }\n\n      if (!e) {\n        for (var _i = this.containers.length - 1; _i >= 0; _i--) {\n          var group = this.containers[_i];\n\n          if (x > group.x && x < group.x + group.width && y > group.y && y < group.y + group.height) {\n            e = group;\n            break;\n          }\n        }\n      }\n\n      return e;\n    }\n  }, {\n    key: \"getElementByName\",\n    value: function getElementByName(name) {\n      for (var i = this.nodes.length - 1; i >= 0; i--) {\n        if (this.nodes[i].getName() == name) {\n          return this.nodes[i];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"findCloserNode\",\n    value: function findCloserNode(node, cond) {\n      var min = {\n        distance: Number.MAX_VALUE,\n        node: null\n      };\n\n      for (var i = this.nodes.length - 1; i >= 0; i--) {\n        var typeNode = this.nodes[i];\n        if (typeNode === node) continue;\n\n        if (cond(typeNode) == true) {\n          var dist = _util2.default.getDistance(node, typeNode);\n\n          if (dist < min.distance) {\n            min.node = typeNode;\n            min.distance = dist;\n          }\n        }\n      }\n\n      return min.node;\n    }\n  }, {\n    key: \"cancleAllSelected\",\n    value: function cancleAllSelected() {\n      this.selectedElements.forEach(function (item) {\n        return item.cancleSelected();\n      });\n      this.selectedElements = [];\n    }\n    /**\n     *\t鼠标滚轮滚动， 缩放\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"mousewheel\",\n    value: function mousewheel(event) {\n      var scale = 1;\n\n      if (event.wheelDelta > 0) {\n        if (this.scale >= this.maxScale) {\n          return;\n        }\n\n        scale = 2;\n      } else {\n        if (this.scale <= this.minScale) {\n          return;\n        }\n\n        scale = 0.5;\n      }\n\n      this.scale *= scale;\n\n      var xy = _util2.default.getXY(this, event);\n\n      var newXy = {\n        x: xy.x * 2,\n        y: xy.y * 2\n      };\n      this.links.forEach(function (link) {\n        return link.style.lineWidth *= scale;\n      });\n      this.containers.forEach(function (container) {\n        container.width *= scale;\n        container.height *= scale;\n        container.x = container.x * scale;\n        container.y = container.y * scale;\n      });\n      this.nodes.forEach(function (node) {\n        node.width *= scale;\n        node.height *= scale;\n        node.x = node.x * scale;\n        node.y = node.y * scale;\n      });\n    }\n  }, {\n    key: \"mousedown\",\n    value: function mousedown(event) {\n      var xy = _util2.default.getXY(this, event);\n\n      var x = xy.x;\n      var y = xy.y;\n      var selectedNode = this.getElementByXY(x, y);\n\n      if (selectedNode && selectedNode != null) {\n        selectedNode.mousedown({\n          e: {\n            x: x,\n            y: y,\n            context: this\n          },\n          event: event\n        });\n        this.currElement = selectedNode;\n      } else if (this.currElement && this.currElement != null) {\n        this.currElement.cancleSelected();\n        this.currElement = null;\n      }\n\n      this.startDragMouseX = x;\n      this.startDragMouseY = y;\n\n      if (this.currElement) {\n        if (this.selectedElements.indexOf(this.currElement) == -1) {\n          this.cancleAllSelected();\n          this.selectedElements.push(this.currElement);\n        }\n      } else {\n        this.cancleAllSelected();\n      }\n\n      for (var i = 0; i < this.selectedElements.length; i++) {\n        var node = this.selectedElements[i];\n        node.selectedLocation = {\n          x: node.x,\n          y: node.y\n        };\n      }\n\n      if (!this.currElement || this.currElement == null) {\n        console.log('mousedown');\n        this.nodes.forEach(function (node) {\n          return node.selectedLocation = {\n            x: node.getX(),\n            y: node.getY()\n          };\n        });\n      }\n\n      this.isOnMouseDown = true;\n      this.publish('mousedown', {\n        target: this.currElement,\n        x: x,\n        y: y,\n        context: this\n      });\n    }\n  }, {\n    key: \"mousemove\",\n    value: function mousemove(event) {\n      var _this = this;\n\n      var xy = _util2.default.getXY(this, event);\n\n      var x = xy.x;\n      var y = xy.y;\n      var dx = x - this.startDragMouseX;\n      var dy = y - this.startDragMouseY;\n      this.publish('mousemove', {\n        target: this.currElement,\n        x: x,\n        y: y,\n        dx: dx,\n        dy: dy,\n        context: this\n      }); //if(this.currElement && !this.currElement.isDragable()) return;\n\n      this.updateView();\n\n      for (var i = this.nodes.length - 1; i >= 0; i--) {\n        var node = this.nodes[i];\n        if (node.x + node.width < 0 || node.x > this.canvas.width) continue;\n\n        if (x > node.x && x < node.x + node.width && y > node.y && y < node.y + node.height) {\n          node.mouseover({\n            e: {\n              x: x,\n              y: y,\n              dx: dx,\n              dy: dy,\n              context: this\n            },\n            event: event\n          });\n          this.publish('mouseover', {\n            target: node,\n            x: x,\n            y: y,\n            dx: dx,\n            dy: dy,\n            context: this\n          });\n        } else {\n          if (node.isOnMousOver) {\n            node.mouseout({\n              e: {\n                x: x,\n                y: y,\n                dx: dx,\n                dy: dy,\n                context: this\n              },\n              event: event\n            });\n            this.publish('mouseout', {\n              target: node,\n              x: x,\n              y: y,\n              dx: dx,\n              dy: dy,\n              context: this\n            });\n          }\n        }\n      }\n\n      if (this.currElement && this.isOnMouseDown && this.currElement.isDragable()) {\n        this.selectedElements.forEach(function (node) {\n          return node.mousedrag({\n            e: {\n              x: x,\n              y: y,\n              dx: dx,\n              dy: dy,\n              context: _this\n            },\n            event: event\n          });\n        }); // for (let i = 0; i < this.selectedElements.length; i++) {\n        // \tlet node = this.selectedElements[i];\n        // \tnode.mousedrag({ x: x, y: y, dx: dx, dy: dy, context: this });\n        // }\n\n        this.publish('mousedrag', {\n          target: this.currElement,\n          x: x,\n          y: y\n        });\n      } else if (this.isOnMouseDown && this.isRangeSelectable && !this.isScale) {\n        var startx = x >= this.startDragMouseX ? this.startDragMouseX : x;\n        var starty = y >= this.startDragMouseY ? this.startDragMouseY : y;\n        var width = Math.abs(x - this.startDragMouseX);\n        var height = Math.abs(y - this.startDragMouseY);\n        this.ctx.beginPath();\n        this.ctx.fillStyle = 'rgba(168,202,236,0.5)';\n        this.ctx.fillRect(startx, starty, width, height);\n        this.ctx.closePath();\n        this.nodes.forEach(function (node) {\n          if (node.x + node.width < 0 || node.x > _this.canvas.width) return;\n\n          if (node.x > startx && node.x + node.width < startx + width) {\n            if (node.y > starty && node.y + node.height < starty + height) {\n              node.mouseselected({\n                e: {\n                  x: x,\n                  y: y,\n                  dx: dx,\n                  dy: dy,\n                  context: _this\n                },\n                event: event\n              });\n\n              _this.selectedElements.push(node);\n            }\n          } else {\n            node.cancleSelected();\n          }\n        });\n      } else if (this.isOnMouseDown && this.isScale) {\n        this.nodes.forEach(function (node) {\n          return node.mousedrag({\n            e: {\n              x: x,\n              y: y,\n              dx: dx,\n              dy: dy,\n              context: _this\n            },\n            event: event\n          });\n        });\n        this.publish('mousedrag', {\n          target: this.currElement,\n          x: x,\n          y: y\n        });\n      }\n    }\n  }, {\n    key: \"mouseup\",\n    value: function mouseup(event) {\n      var xy = _util2.default.getXY(this, event);\n\n      var x = xy.x;\n      var y = xy.y;\n      var dx = x - this.startDragMouseX;\n      var dy = y - this.startDragMouseY;\n      this.publish('mouseup', {\n        target: this.currElement,\n        x: x,\n        y: y,\n        dx: dx,\n        dy: dy,\n        context: this\n      });\n      this.startDragMouseX = null;\n      console.log('mouseup', 'stage');\n\n      if (this.currElement) {\n        this.currElement.mouseup({\n          e: {\n            x: x,\n            y: y,\n            context: this,\n            dx: dx,\n            dy: dy\n          },\n          event: event\n        });\n      }\n\n      this.updateView();\n      this.isOnMouseDown = false;\n    }\n  }, {\n    key: \"keydown\",\n    value: function keydown(e) {\n      var keyID = e.keyCode ? e.keyCode : e.which;\n      this.publish('keydown', keyID); // this.updateView();\n      // return;\n\n      if (keyID === 17) {// Ctrl\n      }\n\n      if (keyID === 18) {// Alt\n      }\n\n      if (keyID === 16) {// Shift\n      }\n\n      if (keyID === 27) {\n        // Esc\n        this.cancleAllSelected();\n        this.currElement = null;\n      }\n\n      if (keyID === 38 || keyID === 87) {\n        // up arrow and W\n        if (this.currElement) {\n          this.currElement.y -= 5;\n        }\n      }\n\n      if (keyID === 39 || keyID === 68) {\n        // right arrow and D\n        if (this.currElement) {\n          this.currElement.x += 5;\n        }\n      }\n\n      if (keyID === 40 || keyID === 83) {\n        // down arrow and S\n        if (this.currElement) {\n          this.currElement.y += 5;\n        }\n      }\n\n      if (keyID === 37 || keyID === 65) {\n        // left arrow and A\n        if (this.currElement) {\n          this.currElement.x -= 5;\n        }\n      }\n\n      this.updateView();\n    }\n  }, {\n    key: \"keyup\",\n    value: function keyup(e) {\n      var keyID = e.keyCode ? e.keyCode : e.which;\n      this.publish('keyup', keyID);\n      this.updateView();\n    }\n  }, {\n    key: \"contextmenu\",\n    value: function contextmenu(event) {\n      this.selectedElements.forEach(function (node) {\n        return node.contextmenu({\n          event: event\n        });\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(topic, action) {\n      this.messageBus.subscribe(topic, action);\n      return this;\n    }\n  }, {\n    key: \"publish\",\n    value: function publish(topic, msg) {\n      this.messageBus.publish(topic, msg);\n      return this;\n    }\n  }, {\n    key: \"removeElementById\",\n    value: function removeElementById(id) {\n      for (var i = 0; i < this.elements.length; i++) {\n        if (this.elements[i].id == id) {\n          this.remove(i);\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(e) {\n      this.elements = this.elements.del(e);\n      this.containers = this.containers.del(e);\n      this.links = this.links.del(e);\n      this.nodes = this.nodes.del(e);\n      this.elementMap[e.id] = e;\n    }\n  }, {\n    key: \"addElement\",\n    value: function addElement(e) {\n      return this.add(e);\n    }\n  }, {\n    key: \"add\",\n    value: function add(e) {\n      if (this.elementMap[e.id] != null) {\n        return;\n      }\n\n      if (!e.id) e.id = new Date().getTime();\n      if (!e.z) e.z = this.elements.length;\n      this.elements.push(e);\n\n      if (e instanceof _container.Container) {\n        this.containers.push(e);\n      } else if (e instanceof _link.Link) {\n        this.links.push(e);\n      } else if (e instanceof _node.Node) {\n        this.nodes.push(e);\n      }\n\n      this.elementMap[e.id] = e;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.elements = [];\n      this.links = [];\n      this.nodes = [];\n      this.containers = [];\n      this.elementMap = {};\n    }\n  }, {\n    key: \"getChilds\",\n    value: function getChilds(node) {\n      var result = [];\n\n      for (var i = 0; i < this.links.length; i++) {\n        if (this.links[i].nodeA === node) {\n          result.push(this.links[i].nodeB);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getNodesBound\",\n    value: function getNodesBound(nodes) {\n      var bound = {\n        x: 10000000,\n        y: 1000000,\n        width: 0,\n        height: 0\n      };\n\n      if (nodes.length > 0) {\n        var minX = 10000000;\n        var maxX = -10000000;\n        var minY = 10000000;\n        var maxY = -10000000;\n        var width = maxX - minX;\n        var height = maxY - minY;\n\n        for (var i = 0; i < nodes.length; i++) {\n          var item = nodes[i];\n\n          if (item.x <= minX) {\n            minX = item.x;\n          }\n\n          if (item.x >= maxX) {\n            maxX = item.x;\n          }\n\n          if (item.y <= minY) {\n            minY = item.y;\n          }\n\n          if (item.y >= maxY) {\n            maxY = item.y;\n          }\n\n          width = maxX - minX + item.width;\n          height = maxY - minY + item.height;\n        }\n\n        bound.x = minX;\n        bound.y = minY;\n        bound.width = width;\n        bound.height = height;\n        return bound;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"isAllChildIsEndpoint\",\n    value: function isAllChildIsEndpoint(node) {\n      var childs = this.getChilds(node);\n\n      for (var i = 0; i < childs.length; i++) {\n        var grandsons = this.getChilds(childs[i]);\n        if (grandsons.length > 0) return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getBoundRecursion\",\n    value: function getBoundRecursion(node) {\n      var childs = this.getChilds(node);\n      if (childs.length == 0) return node.getBound();\n      return this.getNodesBound(childs);\n    }\n  }, {\n    key: \"layoutNode\",\n    value: function layoutNode(node) {\n      var childs = this.getChilds(node);\n      if (childs.length == 0) return node.getBound();\n      this.adjustPosition(node);\n\n      if (this.isAllChildIsEndpoint(node)) {\n        return null;\n      }\n\n      for (var i = 0; i < childs.length; i++) {\n        this.layoutNode(childs[i]);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"adjustPosition\",\n    value: function adjustPosition(node) {\n      var childs = this.getChilds(node);\n      var layout = node.layout;\n      var type = layout.type;\n      var points = null;\n\n      if (type == 'star') {\n        points = JTopo.Layout.getStarPositions(node.x, node.y, childs.length, node.layout.radius, node.layout.beginDegree, node.layout.endDegree);\n      } else if (type == 'tree') {\n        points = JTopo.Layout.getTreePositions(node.x, node.y, childs.length, layout.width, layout.height, layout.direction);\n      }\n\n      for (var i = 0; i < childs.length; i++) {\n        childs[i].setLocation(points[i].x, points[i].y);\n      }\n    }\n  }, {\n    key: \"getParents\",\n    value: function getParents(node) {\n      var result = [];\n\n      for (var i = 0; i < this.links.length; i++) {\n        if (this.links[i].nodeB === node) {\n          result.push(this.links[i].nodeA);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"updateView\",\n    value: function updateView() {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // this.ctx.scale(this.scareX, this.scareY);\n\n      if (this.image != null) {\n        this.ctx.drawImage(this.image, 0, 0, this.width, this.height);\n      }\n\n      for (var i = 0; i < this.links.length; i++) {\n        var link = this.links[i];\n        if (link.nodeA.x + link.nodeA.width < 0 || link.nodeA.x > this.canvas.width) continue;\n        if (link.nodeB.x + link.nodeA.width < 0 || link.nodeB.x > this.canvas.width) continue;\n        link.draw(this.ctx);\n      }\n\n      for (var _i2 = 0; _i2 < this.containers.length; _i2++) {\n        var c = this.containers[_i2];\n        if (c.x + c.width < 0 || c.x > this.canvas.width) continue;\n\n        this.containers[_i2].draw(this.ctx);\n      }\n\n      for (var _i3 = 0; _i3 < this.nodes.length; _i3++) {\n        if (this.nodes[_i3].x + this.nodes[_i3].width < 0 || this.nodes[_i3].x > this.canvas.width) continue;\n\n        this.nodes[_i3].draw(this.ctx);\n      }\n    }\n  }]);\n\n  return Stage;\n}();\n\nexports.default = Stage;","map":null,"metadata":{},"sourceType":"script"}