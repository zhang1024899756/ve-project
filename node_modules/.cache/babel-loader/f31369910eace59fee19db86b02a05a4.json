{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _abstractNode = require('./abstractNode');\n\nvar _abstractNode2 = _interopRequireDefault(_abstractNode);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Node =\n/*#__PURE__*/\nfunction (_abstractNode2$defaul) {\n  _inherits(Node, _abstractNode2$defaul);\n\n  function Node(option) {\n    var _this;\n\n    _classCallCheck(this, Node);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Node).call(this, option));\n    _this.name = option.name || '';\n    _this.width = 35;\n    _this.height = 35;\n    _this.style = {\n      fillStyle: '71, 167, 184',\n      fontSize: '10pt',\n      font: \"Consolas\"\n    };\n    _this.type = null;\n    _this.selected = false;\n    _this.alpha = 1;\n    _this.scala = 1;\n    _this.rotate = 0;\n    return _this;\n  }\n\n  _createClass(Node, [{\n    key: \"drawText\",\n    value: function drawText(ctx) {\n      var text = this.text;\n      if (!text || text == '') return;\n      var textWidth = ctx.measureText(text).width;\n      ctx.font = this.style.fontSize + ' ' + this.style.font;\n      ctx.strokeStyle = 'rgba(230, 230, 230, ' + this.alpha + ')';\n      ctx.strokeText(text, -this.width / 2 + (this.width - textWidth) / 2, this.height / 2 + 12);\n    }\n  }, {\n    key: \"drawTip\",\n    value: function drawTip(ctx) {}\n  }, {\n    key: \"drawSelectedRect\",\n    value: function drawSelectedRect(ctx) {\n      var textWidth = ctx.measureText(this.name).width;\n      var w = this.width;\n      ctx.save();\n      ctx.beginPath();\n      ctx.strokeStyle = 'rgba(168,202,255, 0.9)';\n      ctx.fillStyle = 'rgba(168,202,236,0.5)';\n      ctx.rect(-w / 2 - 2, -this.height / 2 - 2, w + 4, this.height + 4);\n      ctx.fill();\n      ctx.stroke();\n      ctx.closePath();\n      ctx.restore();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      if (!this.isVisible) return;\n      ctx.save();\n      ctx.translate(this.x + this.width / 2, this.y + this.height / 2);\n      ctx.rotate(this.rotate);\n\n      if (this.selected || this.focus) {\n        this.drawSelectedRect(ctx);\n      }\n\n      var image = this.getImage();\n\n      if (image != null) {\n        //ctx.rect(-this.width/2, -this.height/2, this.width, this.height);\n        //ctx.clip();\n        ctx.drawImage(image, -this.width / 2, -this.height / 2);\n      } else {\n        ctx.beginPath();\n        ctx.fillStyle = 'rgba(' + this.style.fillStyle + ',' + this.alpha + ')';\n        ctx.rect(-this.width / 2, -this.height / 2, this.width, this.height);\n        ctx.fill();\n        ctx.closePath();\n      }\n\n      this.drawText(ctx);\n\n      if (this.isTipVisible) {\n        this.tip.draw(ctx, this);\n      }\n\n      ctx.restore();\n    }\n  }, {\n    key: \"split\",\n    value: function split(angle) {\n      var node = this;\n\n      function genNode(x, y, r, beginDegree, endDegree) {\n        var newNode = new JTopo.Node();\n        newNode.setImage(node.image);\n        newNode.setLocation(x, y);\n\n        newNode.draw = function (ctx) {\n          ctx.save();\n          ctx.arc(this.x + this.width / 2, this.y + this.height / 2, r, beginDegree, endDegree);\n          ctx.clip();\n          ctx.beginPath();\n\n          if (this.image != null) {\n            ctx.drawImage(this.image, this.x, this.y);\n          } else {\n            ctx.fillStyle = 'rgba(' + this.style.fillStyle + ',' + this.alpha + ')';\n            ctx.rect(this.x, this.y, this.width, this.height);\n            ctx.fill();\n          }\n\n          ctx.closePath();\n          ctx.restore();\n        };\n\n        return newNode;\n      }\n\n      ;\n      var beginDegree = angle;\n      var endDegree = angle + Math.PI;\n      var nodeA = genNode(node.x, node.y, node.width, beginDegree, endDegree);\n      var nodeB = genNode(node.x, node.y, node.width, beginDegree + Math.PI, beginDegree);\n      return {\n        nodeA: nodeA,\n        nodeB: nodeB\n      };\n    }\n  }]);\n\n  return Node;\n}(_abstractNode2.default);\n\nexports.default = Node;","map":null,"metadata":{},"sourceType":"script"}