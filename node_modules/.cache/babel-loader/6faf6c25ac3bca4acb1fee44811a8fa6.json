{"ast":null,"code":"\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar React = require('react');\n/**\r\n * @width: 对话框宽度\r\n * @height: 对话框高度\r\n * @style: 样式\r\n * @buttons: 对话框按钮组\r\n * @title: 对话框标题\r\n * @className: 对话框类名\r\n **/\n\n\nvar Dialog = function (_React$Component) {\n  _inherits(Dialog, _React$Component);\n\n  function Dialog(props) {\n    _classCallCheck(this, Dialog);\n\n    var _this = _possibleConstructorReturn(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).call(this, props));\n\n    _this.state = {\n      show: false\n    };\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"click\", this.close.bind(this));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"click\", this.close.bind(this));\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      this.setState({\n        show: true\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!this.state.show) return;\n      this.setState({\n        show: false\n      });\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState({\n        show: !this.state.show\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(e) {\n      e = e || event;\n\n      if (e.stopPropagation) {\n        e.stopPropagation();\n      } else {\n        e.cancelBubble = true;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          className = _props.className,\n          buttons = _props.buttons,\n          title = _props.title,\n          style = _props.style,\n          width = _props.width,\n          height = _props.height,\n          onClose = _props.onClose,\n          children = _props.children;\n      style = style ? style : {};\n\n      if (width) {\n        style.width = width;\n        style.marginLeft = -width / 2;\n      }\n\n      if (height) {\n        style.height = height;\n      }\n\n      style.display = this.state.show ? \"\" : \"none\";\n\n      var _className = \"dialog\" + (className ? \" \" + className : \"\");\n\n      return React.createElement(\"div\", {\n        className: \"dialog-container\",\n        ref: \"root\",\n        onMouseDown: this.handleMouseDown.bind(this)\n      }, React.createElement(\"div\", {\n        className: _className,\n        ref: \"dialog\",\n        style: style\n      }, React.createElement(\"div\", {\n        className: \"dialog-header\",\n        ref: \"header\"\n      }, React.createElement(\"a\", {\n        className: \"dialog-close\",\n        onClick: onClose\n      }), React.createElement(\"h3\", {\n        className: \"dialog-title\"\n      }, title)), React.createElement(\"div\", {\n        className: \"dialog-body\",\n        ref: \"body\"\n      }, children), React.createElement(\"div\", {\n        className: \"dialog-footer\",\n        ref: \"footer\"\n      }, buttons.map(function (ele, pos) {\n        return React.createElement(\"a\", {\n          className: \"dialog-button\",\n          key: pos,\n          \"data-name\": ele.name,\n          onClick: ele.onClick\n        }, ele.content);\n      }))), React.createElement(\"div\", {\n        className: \"dialog-backdrop\",\n        ref: \"backdrop\",\n        style: {\n          \"display\": this.state.show ? \"\" : \"none\"\n        }\n      }));\n    }\n  }]);\n\n  return Dialog;\n}(React.Component);\n\nmodule.exports = Dialog;","map":null,"metadata":{},"sourceType":"script"}