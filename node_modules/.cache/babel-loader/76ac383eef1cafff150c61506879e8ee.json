{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _container = require('./container');\n\nvar _container2 = _interopRequireDefault(_container);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar GridContainer =\n/*#__PURE__*/\nfunction (_container2$default) {\n  _inherits(GridContainer, _container2$default);\n\n  function GridContainer() {\n    var _this;\n\n    _classCallCheck(this, GridContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GridContainer).call(this));\n    _this.rows = 3;\n    _this.cols = 2;\n    _this.cellWidth = 60;\n    _this.cellHeight = 60;\n    _this.offset = 3;\n    return _this;\n  }\n\n  _createClass(GridContainer, [{\n    key: \"adjustLayout\",\n    value: function adjustLayout() {\n      for (var i = 0; i < this.items.length; i++) {\n        var item = this.items[i];\n        var row = Math.floor(i / this.cols);\n        var col = i % this.cols;\n        item.x = this.x + col * this.cellWidth;\n        item.y = this.y + row * this.cellHeight;\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(e) {\n      var capacity = this.items.length;\n      if (capacity == this.rows * this.cols) return;\n      this.items.push(e);\n      e.parentContainer = this;\n      this.adjustLayout();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      this.width = this.cols * this.cellWidth;\n      this.height = this.rows * this.cellHeight;\n      ctx.save();\n      ctx.beginPath();\n      ctx.shadowBlur = 12;\n      ctx.shadowColor = 'rgba(0,0,0,0.9)';\n      ctx.shadowOffsetX = 5;\n      ctx.shadowOffsetY = 3;\n      ctx.fillStyle = 'rgba(' + this.style.fillStyle + ',' + this.alpha + ')';\n      var r = 0;\n\n      if (this.isFocus()) {\n        r = this.offset;\n        ctx.shadowColor = 'rgba(0,0,200, 1)';\n        ctx.fillRect(this.x - r, this.y - r, this.width + r * 2, this.height + r * 2);\n      } else {\n        ctx.shadowColor = 'rgba(0,0,0,0.5)';\n        ctx.fillRect(this.x, this.y, this.width, this.height);\n      }\n      /*\n       ctx.moveTo(this.x-r, this.y -r);\n       ctx.lineTo(this.x-r + 10, this.y - 10 -r);\n       ctx.lineTo(this.x-r + 10 + this.width, this.y - 10-r);\n       ctx.lineTo(this.x-r + 10 + this.width, this.y + this.height - 10 -r);\n       ctx.lineTo(this.x-r + this.width, this.y + this.height -r);\n       ctx.moveTo(this.x-r + 10 + this.width, this.y - 10 -r);\n       ctx.lineTo(this.x-r + this.width, this.y -r);\n      \t for(let i=0; i<=this.rows; i++){\n       for(let j=0; j<this.cols; j++){\n       ctx.moveTo(this.x-r, this.y + i * this.cellHeight - r);\n       ctx.lineTo(this.x-r+this.width, this.y+ i * this.cellHeight-r);\n       }\n       }\n       for(let i=0; i<=this.rows; i++){\n       for(let j=0; j<=this.cols; j++){\n       ctx.moveTo(this.x-r + j * this.cellWidth, this.y + r);\n       ctx.lineTo(this.x-r + j * this.cellWidth, this.y+ i * this.cellHeight - r);\n       }\n       }*/\n\n\n      ctx.stroke();\n      ctx.closePath();\n      ctx.restore();\n    }\n  }]);\n\n  return GridContainer;\n}(_container2.default);\n\nexports.default = GridContainer;","map":null,"metadata":{},"sourceType":"script"}