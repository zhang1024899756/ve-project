{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _link = require('./link');\n\nvar _link2 = _interopRequireDefault(_link);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar FoldLink =\n/*#__PURE__*/\nfunction (_link2$default) {\n  _inherits(FoldLink, _link2$default);\n\n  function FoldLink(nodeA, nodeB, name) {\n    var _this;\n\n    _classCallCheck(this, FoldLink);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FoldLink).call(this, nodeA, nodeB));\n    _this.fold = 'x';\n    return _this;\n  }\n\n  _createClass(FoldLink, [{\n    key: \"draw\",\n    value: function draw(ctx) {\n      var x1 = this.nodeA.x;\n      var y1 = this.nodeA.y;\n      var x2 = this.nodeB.x;\n      var y2 = this.nodeB.y;\n      var mx = x1;\n      var my = y1;\n\n      if (x1 == x2 || y1 == y2) {\n        _get(_getPrototypeOf(FoldLink.prototype), \"draw\", this).call(this, ctx);\n      } else {\n        if (this.fold == 'x') {\n          mx = x1 + (x2 - x1);\n        } else {\n          my = y1 + (y2 - y1);\n        }\n\n        ctx.save();\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgba(' + this.style.strokeStyle + ',' + this.style.alpha + ')';\n        ctx.lineWidth = this.style.lineWidth;\n        ctx.moveTo(x1 + this.nodeA.width / 2, y1 + this.nodeA.height / 2);\n        ctx.lineTo(mx + this.nodeA.width / 2, my + this.nodeA.height / 2);\n        ctx.lineTo(x2 + this.nodeA.width / 2, y2 + this.nodeA.height / 2);\n        ctx.stroke();\n        ctx.closePath();\n        ctx.restore();\n      }\n    }\n  }]);\n\n  return FoldLink;\n}(_link2.default);\n\nexports.default = FoldLink;","map":null,"metadata":{},"sourceType":"script"}