{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EditorEventEmitter = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar EditorEventEmitter = exports.EditorEventEmitter = function (_EventEmitter) {\n  _inherits(EditorEventEmitter, _EventEmitter);\n\n  function EditorEventEmitter() {\n    _classCallCheck(this, EditorEventEmitter);\n\n    var _this = _possibleConstructorReturn(this, (EditorEventEmitter.__proto__ || Object.getPrototypeOf(EditorEventEmitter)).call(this));\n\n    _this.editorStack = [];\n    _this.isStart = false;\n    _this.startTime = null;\n    _this.editorIndex = null;\n    return _this;\n  }\n\n  _createClass(EditorEventEmitter, [{\n    key: 'addStartListener',\n    value: function addStartListener(type, callback) {\n      if (this.editorStack.length == 0 && this.isStart == false) {\n        this.startTime = this.startTime || new Date();\n      }\n\n      this.editorIndex = EditorEventEmitter.EditorIndex++;\n      this.editorStack.push(type);\n      this.on(type, callback);\n      this.emitNextListener();\n    }\n  }, {\n    key: 'emitNextListener',\n    value: function emitNextListener() {\n      if (this.editorStack.length == 0) this.isStart = false;else if (this.isStart == false) {\n        this.isStart = true;\n        var type = this.editorStack.shift();\n        this.emit(type);\n        this.startTime = this.startTime || new Date();\n      }\n    }\n  }, {\n    key: 'removeStartListener',\n    value: function removeStartListener(type, callback) {\n      this.removeListener(type, callback);\n      var index = this.editorStack.indexOf(type);\n      this.editorStack.splice(index, 1);\n    }\n  }, {\n    key: 'mountEditorSuccess',\n    value: function mountEditorSuccess() {\n      this.isStart = false;\n      this.emitNextListener();\n    }\n  }]);\n\n  return EditorEventEmitter;\n}(_events2.default);\n\nEditorEventEmitter.EditorIndex = 0;\nvar editorEventEmitter = new EditorEventEmitter();\neditorEventEmitter.setMaxListeners(10000);\nexports.default = editorEventEmitter;","map":null,"metadata":{},"sourceType":"script"}