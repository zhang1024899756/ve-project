{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _link = require('./link');\n\nvar _link2 = _interopRequireDefault(_link);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ArrowsLink =\n/*#__PURE__*/\nfunction (_link2$default) {\n  _inherits(ArrowsLink, _link2$default);\n\n  function ArrowsLink(nodeA, nodeB, name) {\n    var _this;\n\n    _classCallCheck(this, ArrowsLink);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArrowsLink).call(this, nodeA, nodeB));\n    _this.angle = '0.4';\n    _this.offset = 10;\n    return _this;\n  }\n  /**\n   * 画箭头\n   * @param {Object} ctx\n   * @param {Object} ta 移到的距离\n   */\n\n\n  _createClass(ArrowsLink, [{\n    key: \"drawArrows\",\n    value: function drawArrows(ctx, ta) {\n      var t = {\n        x: this.nodeB.x + this.nodeB.width / 2,\n        y: this.nodeB.y + this.nodeB.height / 2\n      };\n      var angle = Math.atan2(ta.y - t.y, ta.x - t.x);\n      t.x = t.x + Math.cos(angle) * this.nodeB.width / 2;\n      t.y = t.y + Math.sin(angle) * this.nodeB.height / 2;\n      var da = 0.4;\n      var pointA = {\n        x: t.x + Math.cos(angle - da) * this.offset,\n        y: t.y + Math.sin(angle - da) * this.offset\n      };\n      var pointB = {\n        x: t.x + Math.cos(angle + da) * this.offset,\n        y: t.y + Math.sin(angle + da) * this.offset\n      }; //ctx.lineTo(this.nodeB.x + this.nodeB.width / 2, this.nodeB.y + this.nodeB.height / 2);\n\n      ctx.lineTo(t.x, t.y);\n      ctx.lineTo(pointB.x, pointB.y);\n      ctx.moveTo(t.x, t.y);\n      ctx.lineTo(pointA.x, pointA.y);\n\n      if (this.style.fillStyle != null) {\n        ctx.fill();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.strokeStyle = 'rgba(' + this.style.strokeStyle + ',' + this.style.alpha + ')';\n      ctx.fillStyle = 'rgba(' + this.style.fillStyle + ',' + this.style.alpha + ')';\n      ctx.lineWidth = this.style.lineWidth;\n      ctx.moveTo(this.nodeA.x + this.nodeA.width / 2, this.nodeA.y + this.nodeA.height / 2);\n      var ta = {\n        x: this.nodeA.x + this.nodeA.width / 2,\n        y: this.nodeA.y + this.nodeA.height / 2\n      };\n      this.drawArrows(ctx, ta);\n      ctx.stroke();\n      ctx.closePath();\n      ctx.restore();\n    }\n  }]);\n\n  return ArrowsLink;\n}(_link2.default);\n\nexports.default = ArrowsLink;","map":null,"metadata":{},"sourceType":"script"}