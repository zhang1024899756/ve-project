{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Tips =\n/*#__PURE__*/\nfunction () {\n  function Tips(option) {\n    _classCallCheck(this, Tips);\n\n    this.width = option.width || 0;\n    this.height = option.height || 0;\n    this.style = option.style || {\n      fontSize: 10,\n      font: ''\n    };\n    this.alpha = option.alpha || 1;\n    this.strokeStyle = option.strokeStyle || 'rgba(230, 230, 230, ' + this.alpha + ')';\n    this.direction = option.direction || 'Top';\n    this.type = option.type || 'Top';\n    this.text = option.text || null;\n  }\n\n  _createClass(Tips, [{\n    key: \"draw\",\n    value: function draw(ctx, node) {\n      switch (this.type) {\n        case 'Top':\n          this.drawTop(ctx, node);\n          break;\n\n        case 'Bottom':\n          this.drawBottom(ctx, node);\n          break;\n\n        case 'Left':\n          this.drawLeft(ctx, node);\n          break;\n\n        case 'Right':\n          this.drawRight(ctx, node);\n          break;\n\n        default:\n          this.drawTop(ctx, node);\n          break;\n      }\n    }\n  }, {\n    key: \"drawTop\",\n    value: function drawTop(ctx, node) {\n      if (!this.text || this.text == '') return;\n      var textWidth = ctx.measureText(this.text).width;\n      var ds = (node.width - textWidth) / 2;\n      ctx.save();\n      ctx.beginPath();\n      ctx.font = this.style.fontSize + ' ' + this.style.font;\n      ctx.strokeStyle = this.strokeStyle;\n      ctx.strokeText(this.text, -node.width / 2 + ds, -node.height - 5); // 文本内容\n\n      ctx.moveTo(-node.width / 2 - 2 + ds, -node.height - 20); // 移到左上点\n\n      ctx.lineTo(-node.width / 2 + 2 + textWidth + ds, -node.height - 20); // 画到右边\n\n      ctx.lineTo(-node.width / 2 + 2 + textWidth + ds, -node.height + 5); // 画到右下点\n\n      ctx.lineTo(-node.width / 2 + 2 + textWidth / 2 + ds + 4, -node.height + 5); // 画到口边\n\n      ctx.lineTo(-node.width / 2 + 2 + textWidth / 2 - 2 + ds, -node.height + 10);\n      ctx.lineTo(-node.width / 2 + 2 + textWidth / 2 - 10 + ds, -node.height + 5);\n      ctx.lineTo(-node.width / 2 - 2 + ds, -node.height + 5);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n    }\n  }, {\n    key: \"drawLeft\",\n    value: function drawLeft(ctx) {\n      if (!this.text || this.text == '') return; // let textWidth = ctx.measureText(this.text).width;\n      // let ds = (node.width - textWidth) / 2\n      // ctx.save();\n      // ctx.beginPath();\n      // ctx.font = this.style.fontSize + ' ' + this.style.font;\n      // ctx.strokeStyle = this.strokeStyle;\n      // ctx.strokeText(this.text, -node.width / 2 + ds, -node.height - 5); // 文本内容\n      // ctx.moveTo(-node.width / 2 - 2 + ds, -node.height - 20) // 移到左上点\n      // ctx.lineTo(-node.width / 2 + 2 + textWidth + ds, -node.height - 20) // 画到右边\n      // ctx.lineTo(-node.width / 2 + 2 + textWidth + ds, -node.height + 5) // 画到右下点\n      // ctx.lineTo((-node.width / 2 + 2 + textWidth / 2) + ds + 4, -node.height + 5) // 画到口边\n      // ctx.lineTo((-node.width / 2 + 2 + textWidth / 2) - 2 + ds, -node.height + 10)\n      // ctx.lineTo((-node.width / 2 + 2 + textWidth / 2) - 10 + ds, -node.height + 5)\n      // ctx.lineTo(-node.width / 2 - 2 + ds, -node.height + 5)\n      // ctx.closePath();\n      // ctx.stroke();\n      // ctx.restore();\n    }\n  }, {\n    key: \"drawBottom\",\n    value: function drawBottom(ctx) {}\n  }, {\n    key: \"drwaRight\",\n    value: function drwaRight(ctx) {}\n  }]);\n\n  return Tips;\n}();\n\nexports.default = Tips;","map":null,"metadata":{},"sourceType":"script"}