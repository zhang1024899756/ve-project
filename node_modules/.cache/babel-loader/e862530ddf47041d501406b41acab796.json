{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _EditorHistory = require('../../utils/EditorHistory');\n\nvar _EditorHistory2 = _interopRequireDefault(_EditorHistory);\n\nvar _EditorSelection = require('../../utils/EditorSelection');\n\nvar _EditorSelection2 = _interopRequireDefault(_EditorSelection);\n\nvar _EditorDom = require('../../utils/EditorDom');\n\nvar _EditorDom2 = _interopRequireDefault(_EditorDom);\n\nvar _EditorTimer = require('../../utils/EditorTimer');\n\nvar _EditorTimer2 = _interopRequireDefault(_EditorTimer);\n\nvar _ColorDropdown = require('../plugins/ColorDropdown');\n\nvar _ColorDropdown2 = _interopRequireDefault(_ColorDropdown);\n\nvar _FormulaDropdown = require('../plugins/FormulaDropdown');\n\nvar _FormulaDropdown2 = _interopRequireDefault(_FormulaDropdown);\n\nvar _TablePickerDropdown = require('../plugins/TablePickerDropdown');\n\nvar _TablePickerDropdown2 = _interopRequireDefault(_TablePickerDropdown);\n\nvar _FontSizeComboBox = require('../plugins/FontSizeComboBox');\n\nvar _FontSizeComboBox2 = _interopRequireDefault(_FontSizeComboBox);\n\nvar _FontFamilyComboBox = require('../plugins/FontFamilyComboBox');\n\nvar _FontFamilyComboBox2 = _interopRequireDefault(_FontFamilyComboBox);\n\nvar _ParagraphComboBox = require('../plugins/ParagraphComboBox');\n\nvar _ParagraphComboBox2 = _interopRequireDefault(_ParagraphComboBox);\n\nvar _EmotionDialog = require('../plugins/EmotionDialog');\n\nvar _EmotionDialog2 = _interopRequireDefault(_EmotionDialog);\n\nvar _SpecialCharsDialog = require('../plugins/SpecialCharsDialog');\n\nvar _SpecialCharsDialog2 = _interopRequireDefault(_SpecialCharsDialog);\n\nvar _ImageDialog = require('../plugins/ImageDialog');\n\nvar _ImageDialog2 = _interopRequireDefault(_ImageDialog);\n\nvar _EditorToolbar = require('./EditorToolbar');\n\nvar _EditorToolbar2 = _interopRequireDefault(_EditorToolbar);\n\nvar _EditorTextArea = require('./EditorTextArea');\n\nvar _EditorTextArea2 = _interopRequireDefault(_EditorTextArea);\n\nvar _EditorContentEditableDiv = require('./EditorContentEditableDiv');\n\nvar _EditorContentEditableDiv2 = _interopRequireDefault(_EditorContentEditableDiv);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // utlils\n// dialog & dropdown\n// combobox\n// dialog\n// base components\n// key down context\n\n\nvar saveSceneTimer = null;\nvar keycont = 0;\nvar MQ = null;\n/**\r\n * 对外接口方法\r\n * @findDOMNode: 获取\"root\",\"editarea\",\"toolbar\",\"color\"的ref对象以及相应的dom对象\r\n * @setContent: 设置html格式数据\r\n * @getContent: 获取html格式数据\r\n * @onFocus: 监听focus事件\r\n * @focusEditor: 聚焦到Editor上\r\n * @defaultValue: 默认内容\r\n * @value: 编辑器的值\r\n * @icons: 工具条上需要显示的图标\r\n **/\n\nvar EditorCore = function (_Component) {\n  _inherits(EditorCore, _Component);\n\n  function EditorCore(props) {\n    _classCallCheck(this, EditorCore);\n\n    var _this = _possibleConstructorReturn(this, (EditorCore.__proto__ || Object.getPrototypeOf(EditorCore)).call(this, props));\n\n    _this.handleKeyDown = function (evt) {\n      evt = evt || event;\n      var target = evt.target || evt.srcElement;\n      var maxInputCount = _this.state.maxInputCount;\n\n      if (target.className && target.className.indexOf('editor-contenteditable-div') != -1) {\n        var keyCode = evt.keyCode || evt.which;\n\n        if (!evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {\n          if (_EditorHistory2.default.getCommandStack().length == 0) {\n            _this.autoSave();\n\n            keycont = 0;\n          }\n\n          clearTimeout(saveSceneTimer);\n          saveSceneTimer = _EditorTimer2.default.setTimeout(function () {\n            var interalTimer = _EditorTimer2.default.setInterval(function () {\n              _this.autoSave();\n\n              keycont = 0;\n\n              _EditorTimer2.default.clearInterval(interalTimer);\n            }, 300);\n          }, 200);\n          lastKeyCode = keyCode;\n          keycont++;\n\n          if (keycont >= maxInputCount) {\n            _this.autoSave();\n\n            keycont = 0;\n          }\n        }\n      }\n\n      _EditorDom2.default.stopPropagation(evt);\n    };\n\n    _this.handleKeyUp = function (evt) {\n      evt = evt || event;\n      var target = evt.target || evt.srcElement;\n\n      if (target.className && target.className.indexOf('editor-contenteditable-div') != -1) {\n        if (!evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {// some handle\n        }\n      }\n\n      _EditorDom2.default.stopPropagation(evt);\n    };\n\n    _this.editorSource = function (state) {\n      var editorState = _this.state.editorState;\n      editorState.showHtml = !editorState.showHtml;\n      state.active = editorState.showHtml;\n      editorState.content = _this.refs.editarea.getContent();\n    };\n\n    _this.editorRemoveFormat = function (state) {\n      _EditorHistory2.default.execCommand(state.icon, false, null);\n\n      _EditorSelection2.default.storeRange();\n\n      var spanNodes = _EditorSelection2.default.getSpanNodes();\n\n      var spanNode = null;\n      var parentNode = null;\n      var nextSibling = null;\n      var childSum = null;\n\n      for (var i = 0; i < spanNodes.length; i++) {\n        switch (spanNodes[i].className) {\n          case \"font-border\":\n            spanNode = spanNodes[i];\n            parentNode = spanNode.parentNode;\n            nextSibling = spanNode.nextSibling || spanNode;\n            childSum = spanNode.childNodes.length;\n\n            for (var c = 0; c < childSum; c++) {\n              parentNode.insertBefore(spanNode.childNodes[c].cloneNode(), nextSibling);\n            }\n\n            parentNode.removeChild(spanNodes[i]);\n            break;\n\n          case \"emphasis\":\n            spanNode = spanNodes[i];\n            parentNode = spanNode.parentNode;\n            nextSibling = spanNode.nextSibling || spanNode;\n            childSum = spanNode.childNodes.length;\n\n            for (var _c = 0; _c < childSum; _c++) {\n              parentNode.insertBefore(spanNode.childNodes[_c].cloneNode(), nextSibling);\n            }\n\n            parentNode.removeChild(spanNodes[i]);\n            break;\n        }\n      }\n\n      _EditorSelection2.default.restoreRange();\n    };\n\n    _this.editorUpLowCase = function (state) {\n      _EditorSelection2.default.storeRange();\n\n      var textNodes = _EditorSelection2.default.getTextNodes();\n\n      var node = null;\n      var start = null;\n      var end = null;\n\n      for (var i = 0; i < textNodes.length; i++) {\n        node = textNodes[i].childNode;\n        start = textNodes[i].startOffset;\n        end = textNodes[i].endOffset;\n        node.nodeValue = node.nodeValue.substring(0, start) + (state.icon == \"touppercase\" ? node.nodeValue.substring(start, end).toUpperCase() : node.nodeValue.substring(start, end).toLowerCase()) + node.nodeValue.substring(end, node.length);\n      }\n\n      _EditorHistory2.default.execCommand(state.icon, false, null);\n\n      _EditorSelection2.default.restoreRange();\n    };\n\n    _this.editorFontBorder = function (state) {\n      var textNodes = _EditorSelection2.default.getTextNodes();\n\n      var startNode = null,\n          endNode = null,\n          startOffset = 0,\n          endOffset = 0;\n\n      for (var i = 0; i < textNodes.length; i++) {\n        // 获取\n        var node = textNodes[i].childNode;\n        var start = textNodes[i].startOffset;\n        var end = textNodes[i].endOffset; // 拷贝\n\n        var cloneNode = node.cloneNode();\n        var startText = cloneNode.nodeValue.substring(0, start);\n        var endText = cloneNode.nodeValue.substring(end, cloneNode.length);\n        var borderText = cloneNode.nodeValue.substring(start, end);\n        var span = null;\n        var textParentNode = textNodes[i].childNode.parentNode;\n\n        if (textParentNode && textParentNode.className && textParentNode.className == \"font-border\") {\n          if (i == 0) {\n            startNode = textNodes[i].childNode;\n            startOffset = start;\n          }\n\n          if (i == textNodes.length - 1) {\n            endNode = textNodes[i].childNode;\n            endOffset = end;\n          }\n        } else {\n          // 重新赋值\n          node.nodeValue = startText;\n          span = document.createElement(\"span\");\n          span.className = \"font-border\";\n          span.innerHTML = borderText;\n          span.style.border = \"1px solid #000\";\n          node.parentNode.insertBefore(span, node.nextSibling || node);\n\n          if (endText != \"\") {\n            node.parentNode.insertBefore(document.createTextNode(endText), span.nextSibling);\n          }\n\n          if (i == 0) startNode = span.childNodes[0];\n\n          if (i == textNodes.length - 1) {\n            endNode = span.childNodes[0];\n            endOffset = span.childNodes[0].length;\n          }\n        }\n      }\n\n      _EditorSelection2.default.addRange(startNode, startOffset, endNode, endOffset); // 合并相同font-border元素\n\n\n      var spanNodes = _EditorSelection2.default.getSpanNodes();\n\n      for (var _i = 0; _i < spanNodes.length - 1; _i++) {\n        var spanNode = spanNodes[_i];\n        var parentNode = spanNodes[_i].parentNode;\n\n        if (_EditorDom2.default.isNullOfTextNode(spanNode.nextSibling)) {\n          // 移除空元素\n          parentNode.removeChild(spanNode.nextSibling);\n        }\n\n        if (spanNode.nextSibling === spanNodes[_i + 1]) {\n          var nextSiblingChildNodes = spanNodes[_i + 1].childNodes;\n\n          for (var c = 0; c < nextSiblingChildNodes.length; c++) {\n            spanNode.appendChild(nextSiblingChildNodes[c].cloneNode());\n          } // 移除老元素\n\n\n          parentNode.removeChild(spanNodes[_i + 1]); // 删除过后，重新指向\n\n          spanNodes[_i + 1] = spanNodes[_i];\n        }\n      }\n\n      _EditorHistory2.default.execCommand(state.icon, false, null);\n    };\n\n    _this.editorEmphasis = function (state) {\n      var textNodes = _EditorSelection2.default.getTextNodes();\n\n      var startNode = null,\n          endNode = null,\n          startOffset = 0,\n          endOffset = 0;\n\n      for (var i = 0; i < textNodes.length; i++) {\n        // 获取\n        var node = textNodes[i].childNode;\n        var start = textNodes[i].startOffset;\n        var end = textNodes[i].endOffset; // 拷贝\n\n        var cloneNode = node.cloneNode();\n        var startText = cloneNode.nodeValue.substring(0, start);\n        var endText = cloneNode.nodeValue.substring(end, cloneNode.length);\n        var borderText = cloneNode.nodeValue.substring(start, end);\n        var span = null;\n        var textParentNode = textNodes[i].childNode.parentNode;\n\n        if (textParentNode && textParentNode.className && textParentNode.className == \"emphasis\") {\n          if (i == 0) {\n            startNode = textNodes[i].childNode;\n            startOffset = start;\n          }\n\n          if (i == textNodes.length - 1) {\n            endNode = textNodes[i].childNode;\n            endOffset = end;\n          }\n        } else {\n          // 重新赋值\n          node.nodeValue = startText;\n          span = document.createElement(\"span\");\n          span.className = \"emphasis\";\n          span.innerHTML = borderText;\n          node.parentNode.insertBefore(span, node.nextSibling || node);\n\n          if (endText != \"\") {\n            node.parentNode.insertBefore(document.createTextNode(endText), span.nextSibling);\n          }\n\n          if (i == 0) startNode = span.childNodes[0];\n\n          if (i == textNodes.length - 1) {\n            endNode = span.childNodes[0];\n            endOffset = span.childNodes[0].length;\n          }\n        }\n      }\n\n      _EditorSelection2.default.addRange(startNode, startOffset, endNode, endOffset); // 合并相同font-border元素\n\n\n      var spanNodes = _EditorSelection2.default.getSpanNodes();\n\n      for (var _i2 = 0; _i2 < spanNodes.length - 1; _i2++) {\n        var spanNode = spanNodes[_i2];\n        var parentNode = spanNodes[_i2].parentNode;\n\n        if (_EditorDom2.default.isNullOfTextNode(spanNode.nextSibling)) {\n          // 移除空元素\n          parentNode.removeChild(spanNode.nextSibling);\n        }\n\n        if (spanNode.nextSibling === spanNodes[_i2 + 1]) {\n          var nextSiblingChildNodes = spanNodes[_i2 + 1].childNodes;\n\n          for (var c = 0; c < nextSiblingChildNodes.length; c++) {\n            spanNode.appendChild(nextSiblingChildNodes[c].cloneNode());\n          } // 移除老元素\n\n\n          parentNode.removeChild(spanNodes[_i2 + 1]); // 删除过后，重新指向\n\n          spanNodes[_i2 + 1] = spanNodes[_i2];\n        }\n      }\n\n      _EditorHistory2.default.execCommand(state.icon, false, null);\n    };\n\n    _this.editorForeColor = function (state, offsetPosition, editarea) {\n      _EditorSelection2.default.storeRange();\n\n      offsetPosition.y += offsetPosition.h + 5;\n\n      _this.refs.color.toggle(offsetPosition, function (color) {\n        _EditorDom2.default.focusNode(editarea);\n\n        ;\n\n        _EditorSelection2.default.restoreRange();\n\n        _EditorHistory2.default.execCommand('forecolor', false, color);\n\n        _this.handleRangeChange();\n      });\n    };\n\n    _this.editorBackColor = function (state, offsetPosition, editarea) {\n      _EditorSelection2.default.storeRange();\n\n      offsetPosition.y += offsetPosition.h + 5;\n\n      _this.refs.color.toggle(offsetPosition, function (color) {\n        _EditorDom2.default.focusNode(editarea);\n\n        ;\n\n        _EditorSelection2.default.restoreRange();\n\n        _EditorHistory2.default.execCommand('backcolor', false, color);\n\n        _this.handleRangeChange();\n      });\n    };\n\n    _this.editorFontSize = function (state, offsetPosition, editarea) {\n      _EditorSelection2.default.storeRange();\n\n      offsetPosition.y += offsetPosition.h + 5;\n\n      _this.refs.fontsize.toggle(offsetPosition, function (fontsize) {\n        _EditorDom2.default.focusNode(editarea);\n\n        _EditorSelection2.default.restoreRange();\n\n        _EditorHistory2.default.execCommand('fontsize', false, fontsize);\n\n        _this.handleRangeChange();\n      });\n    };\n\n    _this.editorFontFamily = function (state, offsetPosition, editarea) {\n      _EditorSelection2.default.storeRange();\n\n      offsetPosition.y += offsetPosition.h + 5;\n\n      _this.refs.fontfamily.toggle(offsetPosition, function (fontfamily) {\n        _EditorDom2.default.focusNode(editarea);\n\n        ;\n\n        _EditorSelection2.default.restoreRange();\n\n        _EditorHistory2.default.execCommand('fontname', false, fontfamily);\n\n        _this.handleRangeChange();\n      });\n    };\n\n    _this.editorParagraph = function (state, offsetPosition, editarea) {\n      _EditorSelection2.default.storeRange();\n\n      offsetPosition.y += offsetPosition.h + 5;\n\n      _this.refs.paragraph.toggle(offsetPosition, function (paragraph) {\n        _EditorDom2.default.focusNode(editarea);\n\n        ;\n\n        _EditorSelection2.default.restoreRange();\n\n        var paragraphs = _EditorSelection2.default.getParagraphs();\n\n        var parentElement = null,\n            childNodes = null,\n            paraElement = null,\n            parentNode = null;\n\n        for (var i = 0; i < paragraphs.length; i++) {\n          switch (paragraphs[i].tagName.toUpperCase()) {\n            case \"TD\":\n            case \"TH\":\n            case \"DIV\":\n              childNodes = paragraphs[i].childNodes;\n              paraElement = document.createElement(paragraph);\n\n              for (var j = 0; j < childNodes.length; j++) {\n                paraElement.appendChild(childNodes[j]);\n              }\n\n              paragraphs[i].appendChild(paraElement);\n              break;\n\n            case \"P\":\n            case \"H1\":\n            case \"H2\":\n            case \"H3\":\n            case \"H4\":\n            case \"H5\":\n            case \"H6\":\n              parentElement = paragraphs[i];\n              childNodes = paragraphs[i].childNodes;\n              paraElement = document.createElement(paragraph);\n              parentNode = parentElement.parentNode;\n              parentNode.insertBefore(paraElement, parentElement.nextSibling);\n\n              for (var _j = 0; _j < childNodes.length; _j++) {\n                paraElement.appendChild(childNodes[_j]);\n              }\n\n              parentNode.removeChild(parentElement);\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        _EditorHistory2.default.execCommand('paragraph', false, paragraph);\n\n        _this.handleRangeChange();\n      });\n    };\n\n    _this.editorHorizontal = function (editarea, root) {\n      var strTime = \"<hr/><p></br></p>\";\n\n      if (_EditorSelection2.default.range && _EditorSelection2.default.validateRange(root, _EditorSelection2.default.range)) {\n        if (_EditorSelection2.default.range.pasteHTML) {\n          _EditorSelection2.default.range.pasteHTML(strTime);\n        } else {\n          var hr = _EditorDom2.default.createHR();\n\n          var p = _EditorDom2.default.createNodeByTag('p', '<br/>');\n\n          _EditorSelection2.default.range.deleteContents();\n\n          _EditorSelection2.default.insertNode(p);\n\n          _EditorSelection2.default.insertNode(hr);\n        }\n      } else {\n        editarea.innerHTML += strTime;\n      } // EditorHistory.execCommand('inserthtml',false,\"<hr/><p><br/></p>\");\n\n    };\n\n    _this.editorDate = function (editarea, root) {\n      var strDate = new Date().Format(\"yyyy-MM-dd\");\n\n      if (_EditorSelection2.default.range && _EditorSelection2.default.validateRange(root, _EditorSelection2.default.range)) {\n        if (_EditorSelection2.default.range.pasteHTML) {\n          _EditorSelection2.default.range.pasteHTML(strDate);\n        } else {\n          var textNode = _EditorDom2.default.createTextNode(strDate);\n\n          _EditorSelection2.default.range.deleteContents();\n\n          _EditorSelection2.default.insertNode(textNode);\n        }\n      } else {\n        editarea.innerHTML += '<p>' + strDate + '</p>';\n      } // EditorHistory.execCommand('inserthtml',false, strDate);\n\n    };\n\n    _this.editorTime = function (editarea, root) {\n      var strTime = new Date().Format('hh:mm:ss');\n\n      if (_EditorSelection2.default.range && _EditorSelection2.default.validateRange(root, _EditorSelection2.default.range)) {\n        if (_EditorSelection2.default.range.pasteHTML) {\n          _EditorSelection2.default.range.pasteHTML(strTime);\n        } else {\n          var textNode = _EditorDom2.default.createTextNode(strTime);\n\n          _EditorSelection2.default.range.deleteContents();\n\n          _EditorSelection2.default.insertNode(textNode);\n        }\n      } else {\n        editarea.innerHTML += '<p>' + strTime + '</p>';\n      } // EditorHistory.execCommand('inserthtml',false,strTime);\n\n    };\n\n    _this.editorImage = function (editarea, root) {\n      _EditorSelection2.default.storeRange();\n\n      _this.refs.image.toggle(function (html) {\n        _EditorDom2.default.focusNode(editarea);\n\n        ;\n\n        _EditorSelection2.default.restoreRange();\n\n        if (html && html.length > 0) {\n          if (_EditorSelection2.default.range && _EditorSelection2.default.validateRange(root, _EditorSelection2.default.range)) {\n            if (_EditorSelection2.default.range.pasteHTML) {\n              _EditorSelection2.default.range.pasteHTML('<p>' + html + '</p>');\n            } else {\n              var p = _EditorDom2.default.createNodeByTag('p', html);\n\n              _EditorSelection2.default.range.deleteContents();\n\n              _EditorSelection2.default.insertNode(p);\n            } // EditorHistory.execCommand('inserthtml',false,html);\n\n          } else {\n            editarea.innerHTML += '<p>' + html + '</p>';\n          }\n        }\n      });\n    };\n\n    _this.editorFormula = function (editarea, root, offsetPosition) {\n      _EditorSelection2.default.storeRange();\n\n      offsetPosition.y += offsetPosition.h + 5;\n      offsetPosition.x -= offsetPosition.w / 2;\n\n      _this.refs.formula.toggle(offsetPosition, function (latex, id) {\n        _EditorDom2.default.focusNode(editarea);\n\n        ;\n\n        _EditorSelection2.default.restoreRange();\n\n        if (latex && latex.length > 0) {\n          var html = '<span>&nbsp;<span class=\"mathquill-embedded-latex\" id=\"' + id + '\"></span>&nbsp;</span>';\n\n          if (_EditorSelection2.default.range && _EditorSelection2.default.validateRange(root, _EditorSelection2.default.range)) {\n            if (_EditorSelection2.default.range.pasteHTML) {\n              _EditorSelection2.default.range.pasteHTML(html);\n            } else {\n              var span = _EditorDom2.default.createNodeByTag('span', '&nbsp;<span class=\"mathquill-embedded-latex\" id=\"' + id + '\"></span>&nbsp;');\n\n              _EditorSelection2.default.range.deleteContents();\n\n              _EditorSelection2.default.insertNode(span);\n            } // EditorHistory.execCommand('inserthtml',false,html);\n\n          } else {\n            editarea.innerHTML += html;\n          }\n\n          _EditorTimer2.default.setTimeout(function () {\n            _this.addFormula(id, latex);\n          }, 200);\n\n          _this.handleRangeChange();\n        }\n      });\n    };\n\n    _this.editorInsertTable = function (editarea, root, offsetPosition) {\n      _EditorSelection2.default.storeRange();\n\n      offsetPosition.y += offsetPosition.h + 5;\n      offsetPosition.x -= offsetPosition.w / 2;\n\n      _this.refs.table.toggle(offsetPosition, function (table) {\n        _EditorDom2.default.focusNode(editarea);\n\n        ;\n\n        _EditorSelection2.default.restoreRange();\n\n        if (_EditorSelection2.default.range && _EditorSelection2.default.validateRange(root, _EditorSelection2.default.range)) {\n          if (_EditorSelection2.default.range.pasteHTML) {\n            _EditorSelection2.default.range.pasteHTML(table.outerHTML);\n          } else {\n            _EditorSelection2.default.range.deleteContents();\n\n            _EditorSelection2.default.insertNode(table);\n          }\n        } else {\n          editarea.innerHTML += table.outerHTML;\n        } // EditorHistory.execCommand('inserthtml',false,html);\n\n\n        _this.handleRangeChange();\n      });\n    };\n\n    _this.editorSpechars = function (editarea, root) {\n      _EditorSelection2.default.storeRange();\n\n      _this.refs.special.toggle(function (char) {\n        _EditorDom2.default.focusNode(editarea);\n\n        ;\n\n        _EditorSelection2.default.restoreRange();\n\n        if (_EditorSelection2.default.range && _EditorSelection2.default.validateRange(root, _EditorSelection2.default.range)) {\n          if (_EditorSelection2.default.range.pasteHTML) {\n            _EditorSelection2.default.range.pasteHTML(char);\n          } else {\n            var textNode = _EditorDom2.default.createTextNode(char);\n\n            _EditorSelection2.default.range.deleteContents();\n\n            _EditorSelection2.default.insertNode(textNode);\n          }\n        } else {\n          editarea.innerHTML += char;\n        } // EditorHistory.execCommand('inserthtml',false,char);\n\n\n        _this.handleRangeChange();\n      });\n    };\n\n    _this.editorEmotion = function (editarea, root) {\n      _EditorSelection2.default.storeRange();\n\n      _this.refs.emotion.toggle(function (img) {\n        _EditorDom2.default.focusNode(editarea);\n\n        ;\n\n        _EditorSelection2.default.restoreRange();\n\n        if (_EditorSelection2.default.range && _EditorSelection2.default.validateRange(root, _EditorSelection2.default.range)) {\n          if (_EditorSelection2.default.range.pasteHTML) {\n            _EditorSelection2.default.range.pasteHTML(img.outerHTML);\n          } else {\n            _EditorSelection2.default.range.deleteContents();\n\n            _EditorSelection2.default.insertNode(img);\n          }\n        } else {\n          editarea.innerHTML += img.outerHTML;\n        } // EditorHistory.execCommand('inserthtml',false,html);\n\n\n        _this.handleRangeChange();\n      });\n    };\n\n    _this.state = {\n      lastKeyCode: null,\n      maxInputCount: 10,\n      editorState: {\n        icon: \"\",\n        showHtml: false,\n        icons: {\n          \"forecolor\": {\n            color: 'transparent',\n            icon: \"forecolor\"\n          },\n          \"backcolor\": {\n            color: 'transparent',\n            icon: \"backcolor\"\n          },\n          \"fontsize\": {\n            value: \"3\",\n            icon: \"fontsize\"\n          },\n          \"paragraph\": {\n            value: \"p\",\n            icon: \"fontsize\"\n          },\n          \"fontfamily\": {\n            value: \"宋体, SimSun\",\n            icon: \"fontfamily\"\n          },\n          \"indent\": {\n            active: false,\n            icon: \"indent\"\n          },\n          \"outdent\": {\n            active: true,\n            icon: \"outdent\"\n          }\n        }\n      },\n      value: _this.props.value || _this.props.defaultValue\n    };\n    _this.iconComponetMap = {};\n    return _this;\n  }\n\n  _createClass(EditorCore, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      _EditorHistory2.default.clear();\n\n      this.setContent(this.state.value);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      var editorState = this.state.editorState;\n\n      switch (editorState.icon) {\n        case \"source\":\n        case \"cleardoc\":\n          if (editorState.content) {\n            this.setContent(editorState.content);\n          }\n\n          setTimeout(function () {\n            _this2.setState({\n              editorState: _extends({}, editorState, {\n                icon: \"\"\n              })\n            });\n          });\n          break;\n      }\n    } // event handler\n\n  }, {\n    key: 'handleFocus',\n    value: function handleFocus(e) {\n      if (this.props.onFocus) {\n        this.props.onFocus(e, this.findDOMNode('root'));\n      }\n\n      _EditorDom2.default.stopPropagation(e);\n    }\n  }, {\n    key: 'handleClick',\n    value: function handleClick(e) {\n      _EditorDom2.default.stopPropagation(e);\n    }\n  }, {\n    key: 'exchangeRangeState',\n    value: function exchangeRangeState(editorState) {\n      var rangeState = _EditorSelection2.default.getRangeState();\n\n      for (var icon in rangeState) {\n        if (!editorState.icons[icon]) editorState.icons[icon] = rangeState[icon];else {\n          switch (icon) {\n            case \"forecolor\":\n            case \"backcolor\":\n              editorState.icons[icon].color = rangeState[icon].color;\n              break;\n\n            case \"paragraph\":\n            case \"fontfamily\":\n            case \"fontsize\":\n              editorState.icons[icon].value = rangeState[icon].value;\n              break;\n          }\n\n          editorState.icons[icon].active = rangeState[icon].active;\n        }\n      }\n\n      return editorState;\n    }\n  }, {\n    key: 'handleChange',\n    value: function handleChange(content) {\n      var value = this.state.value;\n      var editorState = this.state.editorState;\n      editorState.content = content;\n\n      if (value != content) {\n        this.props.onChange(content);\n        this.setState({\n          value: content,\n          editorState: editorState\n        });\n      }\n    }\n  }, {\n    key: 'handleRangeChange',\n    value: function handleRangeChange(e) {\n      e = e || event; // if (e && e.type == \"blur\") return;\n      // 已经被卸载了。\n\n      if (this._calledComponentWillUnmount) return;\n      var target = e ? e.target || e.srcElement : null;\n\n      var selection = _EditorSelection2.default.getSelection();\n\n      if (this.props.onChange) {\n        var content = this.getContent();\n        var value = this.state.value;\n\n        if (value != content) {\n          this.props.onChange(content);\n          this.setState({\n            value: content\n          });\n        }\n      }\n\n      var editorState = this.state.editorState;\n\n      if (selection && selection.rangeCount > 0) {\n        if (editorState.icon == \"source\") {\n          editorState = this.exchangeRangeState(editorState);\n          this.setState({\n            editorState: editorState\n          });\n        } else {\n          var parentNode = _EditorSelection2.default.validateSelection(selection);\n\n          if (parentNode && _EditorDom2.default.isEditorDom(parentNode, _reactDom2.default.findDOMNode(this.refs.root))) {\n            editorState = this.exchangeRangeState(editorState);\n            this.setState({\n              editorState: editorState\n            });\n\n            if (this.refs.editarea && this.refs.editarea.clearResizeTarget) {\n              this.refs.editarea.clearResizeTarget();\n            }\n          }\n        }\n      } else if (target && _EditorDom2.default.isEditorDom(target, _reactDom2.default.findDOMNode(this.refs.root))) {\n        var tagName = target.tagName.toUpperCase();\n\n        switch (tagName) {\n          case \"IMG\":\n            if (this.refs.editarea && this.refs.editarea.setResizeTarget) {\n              this.refs.editarea.setResizeTarget(target);\n            }\n\n            break;\n        }\n      } else if (editorState.icon == \"source\") {\n        editorState = this.exchangeRangeState(editorState);\n        this.setState({\n          editorState: editorState\n        });\n      }\n    }\n  }, {\n    key: 'handleToolbarIconClick',\n    value: function handleToolbarIconClick(e, state) {\n      e = e || event;\n      var target = e.target || e.srcElement;\n\n      var root = _reactDom2.default.findDOMNode(this.refs.root);\n\n      var offsetPosition = _EditorDom2.default.getOffsetRootParentPosition(target, root);\n\n      var handleRangeChange = this.handleRangeChange.bind(this);\n\n      var editarea = _reactDom2.default.findDOMNode(this.refs.editarea);\n\n      if (this.refs.editarea.getEditorRange) {\n        editarea = this.refs.editarea.getEditorRange();\n      }\n\n      var editorState = this.state.editorState;\n\n      _EditorSelection2.default.cloneRange();\n\n      _EditorSelection2.default.storeRange(); //关闭所有Dialog、Box、Dropdown\n\n\n      this.closeAllOpenDialog(state.icon);\n\n      _EditorSelection2.default.restoreRange();\n\n      switch (state.icon) {\n        case \"source\":\n          this.editorSource(state);\n          break;\n\n        case \"undo\":\n          _EditorHistory2.default.undo();\n\n          break;\n\n        case \"redo\":\n          _EditorHistory2.default.redo();\n\n          break;\n\n        case \"removeformat\":\n          this.editorRemoveFormat(state);\n          break;\n\n        case \"bold\":\n        case \"italic\":\n        case \"underline\":\n        case \"strikethrough\":\n        case \"subscript\":\n        case \"superscript\":\n        case \"insertorderedlist\":\n        case \"insertunorderedlist\":\n        case \"selectall\":\n        case \"justifyleft\":\n        case \"justifyright\":\n        case \"justifycenter\":\n        case \"indent\":\n        case \"outdent\":\n          _EditorHistory2.default.execCommand(state.icon, false, null);\n\n          break;\n\n        case \"touppercase\":\n        case \"tolowercase\":\n          this.editorUpLowCase(state);\n          break;\n\n        case \"fontborder\":\n          this.editorFontBorder(state);\n          break;\n\n        case \"emphasis\":\n          this.editorEmphasis(state);\n          break;\n\n        case \"forecolor\":\n          this.editorForeColor(state, offsetPosition, editarea);\n          break;\n\n        case \"backcolor\":\n          this.editorBackColor(state, offsetPosition, editarea);\n          break;\n\n        case \"fontsize\":\n          this.editorFontSize(state, offsetPosition, editarea);\n          break;\n\n        case \"fontfamily\":\n          this.editorFontFamily(state, offsetPosition, editarea);\n          break;\n\n        case \"paragraph\":\n          this.editorParagraph(state, offsetPosition, editarea);\n          break;\n\n        case \"cleardoc\":\n          editorState.content = \"<p><br/></p>\";\n          break;\n\n        case \"horizontal\":\n          this.editorHorizontal(editarea, root);\n          break;\n\n        case \"date\":\n          this.editorDate(editarea, root);\n          break;\n\n        case \"time\":\n          this.editorTime(editarea, root);\n          break;\n\n        case \"image\":\n          this.editorImage(editarea, root);\n          break;\n\n        case \"formula\":\n          this.editorFormula(editarea, root, offsetPosition);\n          break;\n\n        case \"inserttable\":\n          this.editorInsertTable(editarea, root, offsetPosition);\n          break;\n\n        case \"spechars\":\n          this.editorSpechars(editarea, root);\n          break;\n\n        case \"emotion\":\n          this.editorEmotion(editarea, root);\n          break;\n\n        default:\n          var _ref = this.props.plugins || {},\n              _ref$toolbar = _ref.toolbar,\n              toolbar = _ref$toolbar === undefined ? {} : _ref$toolbar;\n\n          var pIcons = toolbar.icons || [];\n          var fIcon = pIcons.find(function (ic) {\n            return ic.name === state.icon;\n          });\n          if (fIcon && fIcon.onIconClick) fIcon.onIconClick({\n            editarea: editarea,\n            root: root,\n            offsetPosition: offsetPosition,\n            state: state,\n            ref: this.iconComponetMap[state.icon]\n          });\n          break;\n      } // setState\n\n\n      editorState.icons[state.icon] = state;\n      editorState.icon = state.icon;\n\n      _EditorSelection2.default.createRange(); // range state\n\n\n      handleRangeChange();\n\n      _EditorDom2.default.stopPropagation(e);\n    }\n  }, {\n    key: 'closeAllOpenDialog',\n    value: function closeAllOpenDialog(icon) {\n      var refsDialog = [\"image\", \"color\", \"formula\", \"table\", \"special\", \"emotion\", \"fontsize\", \"fontfamily\", \"paragraph\"];\n      var icons = [\"forecolor\", \"backcolor\", \"image\", \"emotion\", \"spechars\", \"inserttable\", \"formula\", \"paragraph\", \"fontsize\", \"fontfamily\"];\n      if (icons.indexOf(icon) == -1) return;\n\n      for (var i = 0; i < refsDialog.length; i++) {\n        this.refs[refsDialog[i]].close();\n      }\n    } // utils\n\n  }, {\n    key: 'addFormula',\n    value: function addFormula(id, latex) {\n      var editarea = _reactDom2.default.findDOMNode(this.refs.editarea);\n\n      var htmlElement = document.getElementById(id);\n      var config = {\n        handlers: {\n          edit: function edit() {}\n        },\n        restrictMismatchedBrackets: true\n      };\n      if (!MQ) MQ = MathQuill ? MathQuill.getInterface(2) : null;\n      if (htmlElement == null && MQ == null) return;\n      var mathField = MQ.MathField(htmlElement, config);\n      mathField.latex(latex);\n      var $htmlElement = $(htmlElement);\n      $htmlElement.keydown(function (e) {\n        mathField.focus();\n\n        _EditorDom2.default.stopPropagation(e);\n      });\n      $htmlElement.keyup(function (e) {\n        mathField.focus();\n\n        _EditorDom2.default.stopPropagation(e);\n      });\n      $htmlElement.mouseup(function (e) {\n        mathField.focus();\n\n        _EditorDom2.default.stopPropagation(e);\n      });\n      $htmlElement.mousedown(function (e) {\n        _EditorDom2.default.stopPropagation(e);\n      });\n      $htmlElement.mousemove(function (e) {\n        _EditorDom2.default.stopPropagation(e);\n      });\n      $(editarea).mousedown(function (e) {\n        mathField.blur();\n\n        _EditorDom2.default.stopPropagation(e);\n      });\n      $(editarea).mousemove(function (e) {\n        _EditorDom2.default.stopPropagation(e);\n      });\n    }\n  }, {\n    key: 'autoSave',\n    value: function autoSave() {\n      _EditorHistory2.default.execCommand('autosave', false, null);\n    } // public functions\n\n  }, {\n    key: 'findDOMNode',\n    value: function findDOMNode(refName) {\n      // 对外公布方法\n      var keys = [\"root\", \"editarea\", \"toolbar\", \"color\"];\n      if (keys.indexOf(refName) == -1) return {\n        ref: null,\n        dom: null\n      };\n      return {\n        ref: this.refs[refName],\n        dom: _reactDom2.default.findDOMNode(this.refs[refName])\n      };\n    }\n  }, {\n    key: 'setContent',\n    value: function setContent(content) {\n      content = content || \"\"; // 后续添加校验方法\n\n      this.refs.editarea.setContent(content); // mathquill supports\n\n      if (content.indexOf(\"mathquill-embedded-latex\") != -1) {\n        var _self = this;\n\n        _EditorTimer2.default.setTimeout(function () {\n          var editarea = _reactDom2.default.findDOMNode(_self.refs.editarea);\n\n          var elements = editarea.querySelectorAll('.mathquill-embedded-latex');\n\n          for (var i = 0; i < elements.length; i++) {\n            if (!elements[i].id) {\n              var id = \"mathquill-\" + i + \"-\" + new Date().valueOf();\n              var latex = elements[i].innerHTML;\n              elements[i].id = id;\n\n              _self.addFormula(id, latex);\n            }\n          }\n        }, 100);\n      }\n    }\n  }, {\n    key: 'getContent',\n    value: function getContent() {\n      if (this.refs.editarea) return this.refs.editarea.getContent();else return \"\";\n    }\n  }, {\n    key: 'focusEditor',\n    value: function focusEditor() {\n      var editarea = _reactDom2.default.findDOMNode(this.refs.editarea);\n\n      _EditorDom2.default.focusNode(editarea);\n\n      ;\n    } // render functions  \n\n  }, {\n    key: 'renderEditArea',\n    value: function renderEditArea() {\n      var showHtml = this.state.editorState.showHtml;\n\n      if (showHtml) {\n        return _react2.default.createElement(_EditorTextArea2.default, {\n          ref: 'editarea',\n          onChange: this.handleChange.bind(this)\n        });\n      } else {\n        return _react2.default.createElement(_EditorContentEditableDiv2.default, {\n          ref: 'editarea',\n          handleKeyDown: this.handleKeyDown,\n          handleKeyUp: this.handleKeyUp,\n          onEditorMount: this.props.onEditorMount,\n          onRangeChange: this.handleRangeChange.bind(this)\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var editArea = this.renderEditArea();\n\n      var _props = this.props,\n          index = _props.index,\n          fontSize = _props.fontSize,\n          paragraph = _props.paragraph,\n          fontFamily = _props.fontFamily,\n          icons = _props.icons,\n          plugins = _props.plugins,\n          onBlur = _props.onBlur,\n          className = _props.className,\n          id = _props.id,\n          onFocus = _props.onFocus,\n          onClick = _props.onClick,\n          onChange = _props.onChange,\n          onEditorMount = _props.onEditorMount,\n          uploadImageCallback = _props.uploadImageCallback,\n          props = _objectWithoutProperties(_props, ['index', 'fontSize', 'paragraph', 'fontFamily', 'icons', 'plugins', 'onBlur', 'className', 'id', 'onFocus', 'onClick', 'onChange', 'onEditorMount', 'uploadImageCallback']);\n\n      var editorState = this.state.editorState;\n\n      var _icons = icons.join(\" \").replace(/\\|/gm, \"separator\").split(\" \");\n\n      var _ref2 = this.props.plugins || {},\n          _ref2$toolbar = _ref2.toolbar,\n          toolbar = _ref2$toolbar === undefined ? {} : _ref2$toolbar;\n\n      var pIcons = toolbar.icons || [];\n      _EditorSelection2.default.customIcons = pIcons;\n      return _react2.default.createElement('div', _extends({\n        ref: 'root',\n        id: id,\n        className: \"editor-container editor-default\" + (className ? \" \" + className : \"\"),\n        onClick: this.handleClick.bind(this),\n        onBlur: this.handleRangeChange.bind(this),\n        onFocus: this.handleFocus.bind(this)\n      }, props), _react2.default.createElement(_EditorToolbar2.default, {\n        ref: 'toolbar',\n        editorState: editorState,\n        onIconClick: function onIconClick(e, state) {\n          return _this3.handleToolbarIconClick(e, state);\n        },\n        icons: this.props.icons,\n        customIcons: pIcons,\n        paragraph: this.props.paragraph,\n        fontsize: this.props.fontSize,\n        fontfamily: this.props.fontFamily\n      }, _react2.default.createElement(_ImageDialog2.default, {\n        hidden: _icons.indexOf(\"image\") == -1,\n        ref: 'image',\n        uploader: plugins.image.uploader,\n        customUploader: plugins.image.customUploader\n      }), _react2.default.createElement(_ColorDropdown2.default, {\n        hidden: _icons.indexOf(\"forecolor\") == -1 && _icons.indexOf(\"forecolor\"),\n        ref: 'color'\n      }), _react2.default.createElement(_FormulaDropdown2.default, {\n        hidden: _icons.indexOf(\"formula\") == -1,\n        ref: 'formula'\n      }), _react2.default.createElement(_TablePickerDropdown2.default, {\n        hidden: _icons.indexOf(\"inserttable\") == -1,\n        ref: 'table'\n      }), _react2.default.createElement(_SpecialCharsDialog2.default, {\n        hidden: _icons.indexOf(\"spechars\") == -1,\n        ref: 'special'\n      }), _react2.default.createElement(_EmotionDialog2.default, {\n        hidden: _icons.indexOf(\"emotion\") == -1,\n        ref: 'emotion'\n      }), _react2.default.createElement(_FontSizeComboBox2.default, {\n        hidden: _icons.indexOf(\"fontsize\") == -1,\n        ref: 'fontsize',\n        fontsize: this.props.fontSize,\n        value: editorState.icons[\"fontsize\"] ? editorState.icons[\"fontsize\"].value : fontSize[0].value\n      }), _react2.default.createElement(_FontFamilyComboBox2.default, {\n        hidden: _icons.indexOf(\"fontfamily\") == -1,\n        ref: 'fontfamily',\n        fontfamily: this.props.fontFamily,\n        value: editorState.icons[\"fontfamily\"] ? editorState.icons[\"fontfamily\"].value : fontFamily[0].value\n      }), _react2.default.createElement(_ParagraphComboBox2.default, {\n        hidden: _icons.indexOf(\"paragraph\") == -1,\n        ref: 'paragraph',\n        paragraph: this.props.paragraph,\n        value: editorState.icons[\"paragraph\"] ? editorState.icons[\"paragraph\"].value : paragraph[0].value\n      }), pIcons.filter(function (ic) {\n        return ic.component;\n      }).map(function (ic) {\n        var Com = ic.component;\n        return _react2.default.createElement(Com, _extends({\n          hidden: _icons.indexOf(ic.name) == -1,\n          ref: function ref(com) {\n            return _this3.iconComponetMap[ic.name] = com;\n          }\n        }, ic.props, {\n          value: editorState.icons[ic.name] ? editorState.icons[ic.name].value : ic.defaultValue\n        }));\n      })), editArea);\n    }\n  }]);\n\n  return EditorCore;\n}(_react.Component);\n\nexports.default = EditorCore;","map":null,"metadata":{},"sourceType":"script"}