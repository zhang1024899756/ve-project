{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EditorDom = require(\"./EditorDom\");\n\nvar _EditorDom2 = _interopRequireDefault(_EditorDom);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nNodeList.prototype.toArray = function () {\n  var nodes = [];\n\n  for (var i = 0; i < this.length; i++) {\n    nodes.push(this[i]);\n  }\n\n  return nodes;\n};\n\nvar EditorSelection = {\n  range: null,\n  selection: null,\n  storedRange: false,\n  customIcons: [],\n  getSelection: function getSelection() {\n    if (window.getSelection) return window.getSelection();else if (document.getSelection) return document.getSelection();else if (document.selection) return document.selection.createRange();else return null;\n  },\n  cloneRange: function cloneRange() {\n    // cloneRange\n    if (this.storedRange) return;\n    this.selection = this.getSelection();\n    this.selection.removeAllRanges();\n\n    if (this.selection && this.range) {\n      this.selection.addRange(this.range.cloneRange());\n      this.range = this.range.cloneRange();\n    }\n  },\n  getTextNodes: function getTextNodes() {\n    if (!this.range) return [];\n    if (this.range.collapsed) return [];\n    var parent = this.range.commonAncestorContainer;\n    var startNode = this.range.startContainer;\n    var startOffset = this.range.startOffset;\n    var endNode = this.range.endContainer;\n    var endOffset = this.range.endOffset;\n    var textNodes = [];\n\n    if (startNode === endNode && _EditorDom2.default.isTextNode(startNode)) {\n      textNodes.push({\n        childNode: startNode,\n        startOffset: startOffset,\n        endOffset: endOffset\n      });\n    } else {\n      var childNodes = parent.childNodes.toArray(),\n          startFlag = false;\n      var childNode = childNodes.shift();\n\n      while (childNode) {\n        if (_EditorDom2.default.isTextNode(childNode)) {\n          if (childNode === startNode) {\n            textNodes.push({\n              childNode: childNode,\n              startOffset: startOffset,\n              endOffset: childNode.length\n            });\n            startFlag = true;\n          } else if (childNode === endNode) {\n            textNodes.push({\n              childNode: childNode,\n              startOffset: 0,\n              endOffset: endOffset\n            });\n          } else if (textNodes.length > 0) {\n            textNodes.push({\n              childNode: childNode,\n              startOffset: 0,\n              endOffset: childNode.length\n            });\n          }\n        }\n\n        if (childNode == endNode) {\n          break;\n        }\n\n        var newChildNodes = childNode.childNodes.toArray();\n        childNodes = newChildNodes.concat(childNodes);\n        childNode = childNodes.shift();\n      }\n    }\n\n    return textNodes;\n  },\n  getSpanNodes: function getSpanNodes() {\n    if (!this.range) return [];\n    if (this.range.collapsed) return [];\n    var parent = this.range.commonAncestorContainer;\n    if (parent.nodeType == 3) parent = parent.parentNode;\n    var startNode = this.range.startContainer;\n    var endNode = this.range.endContainer;\n    var spanNodes = [];\n\n    if (_EditorDom2.default.isSpanNode(parent)) {\n      spanNodes.push(parent);\n    }\n\n    if (startNode === endNode && _EditorDom2.default.isSpanNode(startNode)) {\n      spanNodes.push(startNode);\n    } else {\n      var childNodes = parent.childNodes.toArray(),\n          i = 0,\n          startFlag = false;\n      var childNode = childNodes.shift();\n\n      while (childNode) {\n        if (childNode === startNode) {\n          startFlag = true;\n\n          if (_EditorDom2.default.isSpanNode(childNode.parentNode)) {\n            spanNodes.push(childNode.parentNode);\n          }\n        }\n\n        if (_EditorDom2.default.isSpanNode(childNode) && startFlag) {\n          spanNodes.push(childNode);\n        }\n\n        if (childNode == endNode) {\n          break;\n        }\n\n        var newChildNodes = childNode.childNodes.toArray();\n        childNodes = newChildNodes.concat(childNodes);\n        childNode = childNodes.shift();\n      }\n    }\n\n    var resultNodes = [];\n\n    for (var i = 0; i < spanNodes.length; i++) {\n      if (resultNodes.indexOf(spanNodes[i]) == -1) {\n        resultNodes.push(spanNodes[i]);\n      }\n    }\n\n    return resultNodes;\n  },\n  getParagraphs: function getParagraphs() {\n    var textNodes = this.getTextNodes();\n    var parents = [];\n\n    for (var i = 0; i < textNodes.length; i++) {\n      var currentNode = null;\n      var tagName = textNodes[i].childNode.parentNode.tagName || textNodes[i].childNode.parentNode.nodeName;\n\n      switch (tagName.toUpperCase()) {\n        case \"FONT\":\n          currentNode = textNodes[i].childNode.parentNode;\n          break;\n\n        default:\n          currentNode = textNodes[i].childNode;\n          break;\n      }\n\n      if (parents.indexOf(currentNode.parentNode) == -1) parents.push(currentNode.parentNode);\n    }\n\n    return parents;\n  },\n  getCommonAncestor: function getCommonAncestor() {\n    if (this.range.collapsed) return null;\n    var parent = this.range.commonAncestorContainer;\n    return parent;\n  },\n  addRange: function addRange(startContainer, startOffset, endContainer, endOffset) {\n    // addRange\n    this.selection = this.getSelection();\n    this.selection.removeAllRanges();\n\n    if (this.selection && this.range && startContainer instanceof Node && endContainer instanceof Node) {\n      this.range.setStart(startContainer, startOffset);\n      this.range.setEnd(endContainer, endOffset);\n      this.selection.addRange(this.range.cloneRange());\n      this.range = this.range.cloneRange();\n    }\n  },\n  validateSelection: function validateSelection(selection) {\n    var selection = selection || this.selection;\n    var anchorNode = selection.anchorNode;\n    if (!anchorNode) return false;\n    var parentNode = anchorNode.parentNode;\n    if (!parentNode) return false;\n    if (anchorNode.offsetParent && anchorNode.offsetParent.className == \"editor-toolbar\") return false;\n    if (parentNode.offsetParent && parentNode.offsetParent.className == \"editor-toolbar\") return false;\n    return parentNode;\n  },\n  validateRange: function validateRange(parentNode, range) {\n    var rangeParentNode = range.startContainer.parentNode;\n\n    if (rangeParentNode == parentNode) {\n      return true;\n    } else {\n      var findClass = 'find-range-node-' + Math.random().toFixed(10).replace('.', '-');\n      rangeParentNode.classList.add(findClass);\n      var item = parentNode.querySelector('.' + findClass);\n      rangeParentNode.classList.remove(findClass);\n      return !!item;\n    }\n  },\n  createRange: function createRange() {\n    if (this.storedRange) return;\n    this.selection = this.getSelection();\n    if (!this.validateSelection()) return;\n\n    if (this.selection && this.selection.rangeCount > 0) {\n      this.range = this.selection.getRangeAt(0).cloneRange();\n    } else {\n      this.range = null;\n    }\n  },\n  clearRange: function clearRange() {\n    if (this.storedRange) return;\n    this.selection = this.getSelection();\n    this.selection.removeAllRanges();\n  },\n  getRangeState: function getRangeState() {\n    var _this = this;\n\n    var rangeState = {}; // init icons state\n\n    var canActiveIcons = \"bold italic underline strikethrough fontborder superscript subscript justifycenter justifyleft justifyright\";\n    var icons = canActiveIcons.split(\" \");\n\n    for (var i = 0; i < icons.length; i++) {\n      rangeState[icons[i]] = {\n        icon: icons[i],\n        active: false\n      };\n    } // change  icons state\n\n\n    if (this.range) {\n      // IE 没有parentElement 固修改成parentNode\n      this.customIcons.forEach(function (cIcon) {\n        if (cIcon && cIcon.mapRangeState) {\n          rangeState = cIcon.mapRangeState(rangeState, _this);\n        }\n      });\n      var parentElement = this.range.startContainer.parentNode;\n\n      while ((parentElement.tagName || parentElement.nodeName).toUpperCase() != \"DIV\") {\n        var tagName = parentElement.tagName || parentElement.nodeName;\n\n        switch (tagName.toUpperCase()) {\n          case \"I\":\n            rangeState[\"italic\"] = {\n              active: true,\n              icon: \"italic\"\n            };\n            break;\n\n          case \"B\":\n            rangeState[\"bold\"] = {\n              active: true,\n              icon: \"bold\"\n            };\n            break;\n\n          case \"U\":\n            rangeState[\"underline\"] = {\n              active: true,\n              icon: \"underline\"\n            };\n            break;\n\n          case \"STRIKE\":\n            rangeState[\"strikethrough\"] = {\n              active: true,\n              icon: \"strikethrough\"\n            };\n            break;\n\n          case \"SUP\":\n            rangeState[\"superscript\"] = {\n              active: true,\n              icon: \"superscript\"\n            };\n            break;\n\n          case \"SUB\":\n            rangeState[\"subscript\"] = {\n              active: true,\n              icon: \"subscript\"\n            };\n            break;\n\n          case \"FONT\":\n            rangeState[\"forecolor\"] = {\n              color: parentElement.color,\n              icon: \"forecolor\"\n            };\n            rangeState[\"backcolor\"] = {\n              color: parentElement.style.backgroundColor,\n              icon: \"backcolor\"\n            };\n            rangeState[\"fontsize\"] = {\n              value: parentElement.size,\n              icon: \"fontsize\"\n            };\n            rangeState[\"fontfamily\"] = {\n              value: parentElement.face,\n              icon: \"fontfamily\"\n            };\n            break;\n\n          case \"P\":\n          case \"H1\":\n          case \"H2\":\n          case \"H3\":\n          case \"H5\":\n          case \"H6\":\n            var textAlign = parentElement.style.textAlign ? parentElement.style.textAlign : \"left\";\n            var fontFamily = parentElement.style.fontFamily ? parentElement.style.fontFamily : \"宋体,SimSun\";\n            var fontSize = parentElement.style.fontSize ? parentElement.style.fontSize : \"12px\";\n            rangeState[\"justifycenter\"] = {\n              active: textAlign == \"center\",\n              icon: \"subscript\"\n            };\n            rangeState[\"justifyleft\"] = {\n              active: textAlign == \"left\",\n              icon: \"subscript\"\n            };\n            rangeState[\"justifyright\"] = {\n              active: textAlign == \"right\",\n              icon: \"subscript\"\n            };\n            rangeState[\"paragraph\"] = {\n              value: parentElement.tagName.toLowerCase(),\n              icon: \"paragraph\"\n            };\n            break;\n\n          case \"BLOCKQUOTE\":\n            rangeState[\"indent\"] = {\n              active: true,\n              icon: \"indent\"\n            };\n            rangeState[\"outdent\"] = {\n              active: false,\n              icon: \"outdent\"\n            };\n            break;\n\n          case \"SPAN\":\n            var className = parentElement.className || \"\";\n\n            if (className.indexOf(\"font-border\") != -1) {\n              rangeState[\"fontborder\"] = {\n                active: true,\n                icon: \"fontborder\"\n              };\n            }\n\n            break;\n        }\n\n        parentElement = parentElement.parentNode;\n      }\n    }\n\n    if (!rangeState[\"forecolor\"]) rangeState[\"forecolor\"] = {\n      color: 'transparent',\n      icon: \"forecolor\"\n    };\n    if (!rangeState[\"backcolor\"]) rangeState[\"backcolor\"] = {\n      color: 'transparent',\n      icon: \"backcolor\"\n    };\n    if (!rangeState[\"fontsize\"] || !rangeState[\"fontsize\"].value) rangeState[\"fontsize\"] = {\n      value: \"3\",\n      icon: \"fontsize\"\n    };\n    if (!rangeState[\"paragraph\"] || !rangeState[\"paragraph\"].value) rangeState[\"paragraph\"] = {\n      value: \"p\",\n      icon: \"fontsize\"\n    };\n    if (!rangeState[\"fontfamily\"] || !rangeState[\"fontfamily\"].value) rangeState[\"fontfamily\"] = {\n      value: \"宋体, SimSun\",\n      icon: \"fontfamily\"\n    };\n\n    if (!rangeState[\"indent\"]) {\n      rangeState[\"outdent\"] = {\n        active: true,\n        icon: \"outdent\"\n      };\n      rangeState[\"indent\"] = {\n        active: false,\n        icon: \"indent\"\n      };\n    }\n\n    return rangeState;\n  },\n  storeRange: function storeRange() {\n    this.storedRange = this.range ? this.range.cloneRange() : null;\n  },\n  restoreRange: function restoreRange() {\n    this.range = this.storedRange ? this.storedRange.cloneRange() : null;\n    this.storedRange = null;\n    this.cloneRange();\n  },\n  insertNode: function insertNode(node) {\n    if (this.range) {\n      EditorSelection.range.insertNode(node);\n      var lastNode = node.lastChild || node;\n\n      if (lastNode) {\n        // this.range.setEndAfter(lastNode);\n        this.range.setStartAfter(lastNode);\n        this.range.setEndAfter(lastNode);\n      }\n\n      this.selection.removeAllRanges();\n      this.selection.addRange(this.range);\n    }\n  }\n};\nexports.default = EditorSelection;","map":null,"metadata":{},"sourceType":"script"}