{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar UMLClassNode =\n/*#__PURE__*/\nfunction (_node2$default) {\n  _inherits(UMLClassNode, _node2$default);\n\n  function UMLClassNode(option) {\n    var _this;\n\n    _classCallCheck(this, UMLClassNode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UMLClassNode).call(this, option));\n    _this.width = option.width || 168;\n    _this.className = option.width || name;\n    _this.style.fillStyle = option.style.fillStyle || '71, 167, 184';\n    _this.rowHeight = option.rowHeight || 18;\n    _this.classObj = option.classObj || null;\n    return _this;\n  }\n\n  _createClass(UMLClassNode, [{\n    key: \"draw\",\n    value: function draw(ctx, scale) {\n      if (!this.visible) return;\n\n      if (this.classObj != null) {\n        this.operations = [];\n        this.attributes = [];\n\n        for (var k in this.classObj) {\n          var v = this.classObj[k];\n\n          if (typeof v == 'function') {\n            this.operations.push('+ ' + k);\n          } else {\n            this.attributes.push('- ' + k);\n          }\n        }\n      }\n\n      if (this.operations == null || this.operations.length == 0) {\n        this.operations = [' '];\n      }\n\n      if (this.attributes == null || this.attributes.length == 0) {\n        this.attributes = [' '];\n      }\n\n      this.height = (this.operations.length + this.attributes.length + 1) * this.rowHeight + 3;\n      ctx.save();\n      ctx.beginPath();\n      ctx.fillStyle = 'rgba(239,247,149,' + this.alpha + ')';\n      ctx.rect(this.x, this.y, this.width, this.getHeight());\n      ctx.shadowBlur = 0;\n      ctx.shadowOffsetX = 0;\n      ctx.shadowOffsetY = 0;\n      ctx.fill();\n      ctx.font = this.style.fontSize + ' ' + this.style.font;\n      ctx.moveTo(this.x, this.y + this.rowHeight + 3);\n      ctx.lineTo(this.x + this.width, this.y + this.rowHeight + 3);\n      var textWidth = ctx.measureText(this.className).width;\n      ctx.strokeText(this.className, this.getX() + (this.getWidth() - textWidth) / 2, this.getY() + this.rowHeight);\n\n      for (var i = 0; i < this.operations.length; i++) {\n        var operation = this.operations[i];\n        ctx.strokeText(operation, this.getX() + 5, this.getY() + this.rowHeight + this.rowHeight * (i + 1));\n      }\n\n      ctx.moveTo(this.x, this.y + this.rowHeight * (this.operations.length + 1) + 3);\n      ctx.lineTo(this.x + this.width, this.y + this.rowHeight * (this.operations.length + 1) + 3);\n      var begingHeight = this.y + this.rowHeight * (this.operations.length + 1);\n\n      for (var _i = 0; _i < this.attributes.length; _i++) {\n        var attribute = this.attributes[_i];\n        ctx.strokeText(attribute, this.getX() + 5, begingHeight + this.rowHeight * (_i + 1));\n      }\n\n      ctx.stroke();\n      ctx.closePath();\n      ctx.restore();\n      ctx.scale(1, 1);\n    }\n  }]);\n\n  return UMLClassNode;\n}(_node2.default);\n\nexports.default = UMLClassNode;","map":null,"metadata":{},"sourceType":"script"}