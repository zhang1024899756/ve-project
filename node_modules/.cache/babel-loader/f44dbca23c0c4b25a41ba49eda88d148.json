{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zhangxinyu/Desktop/ve_project/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar Element =\n/*#__PURE__*/\nfunction () {\n  function Element() {\n    _classCallCheck(this, Element);\n\n    this.selectedLocation = null; // 鼠标点击的位置\n  }\n\n  _createClass(Element, [{\n    key: \"draw\",\n    value: function draw() {}\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      return this.id;\n    }\n  }, {\n    key: \"setId\",\n    value: function setId(i) {\n      this.id = i;\n    }\n  }, {\n    key: \"getFloatMenu\",\n    value: function getFloatMenu() {\n      return this.floatMenu;\n    }\n  }, {\n    key: \"setFloatMenu\",\n    value: function setFloatMenu(m) {\n      this.floatMenu = m;\n      return this;\n    }\n  }, {\n    key: \"isFloatMenuVisible\",\n    value: function isFloatMenuVisible() {\n      return this.floatMenuVisible;\n    }\n  }, {\n    key: \"setFloatMenuVisible\",\n    value: function setFloatMenuVisible(v) {\n      this.floatMenuVisible = v;\n      return this;\n    }\n  }, {\n    key: \"setX\",\n    value: function setX(x) {\n      this.x = x;\n      return this;\n    }\n  }, {\n    key: \"setY\",\n    value: function setY(y) {\n      this.y = y;\n      return this;\n    }\n  }, {\n    key: \"getX\",\n    value: function getX() {\n      return this.x;\n    }\n  }, {\n    key: \"getY\",\n    value: function getY() {\n      return this.y;\n    }\n  }, {\n    key: \"getLocation\",\n    value: function getLocation(x, y) {\n      return {\n        x: this.getX(),\n        y: this.getY()\n      };\n    }\n  }, {\n    key: \"setLocation\",\n    value: function setLocation(x, y) {\n      this.setX(x);\n      this.setY(y);\n      return this;\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.width;\n    }\n  }, {\n    key: \"setWidth\",\n    value: function setWidth(width) {\n      this.width = width;\n      return this;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.height;\n    }\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(height) {\n      this.height = height;\n      return this;\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return {\n        width: this.getWidth(),\n        height: this.getHeight()\n      };\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.setWidth(width);\n      this.setHeight(height);\n      return this;\n    }\n  }, {\n    key: \"setBound\",\n    value: function setBound(x, y, width, height) {\n      this.setLocation(x, y);\n      this.setSize(width, height);\n      return this;\n    }\n  }, {\n    key: \"getBound\",\n    value: function getBound() {\n      return {\n        left: this.getX(),\n        top: this.getY(),\n        right: this.getX() + this.getWidth(),\n        bottom: this.getY() + this.getHeight()\n      };\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this.visible;\n    }\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(v) {\n      this.visible = v;\n      return this;\n    }\n  }, {\n    key: \"isDragable\",\n    value: function isDragable() {\n      return this.dragable;\n    }\n  }, {\n    key: \"setDragable\",\n    value: function setDragable(d) {\n      this.dragable = d;\n      return this;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected() {\n      return this.selected;\n    }\n  }, {\n    key: \"setSelected\",\n    value: function setSelected(s) {\n      this.selected = s;\n      return this;\n    }\n  }, {\n    key: \"isFocus\",\n    value: function isFocus() {\n      return this.focus;\n    }\n  }, {\n    key: \"setFocus\",\n    value: function setFocus(f) {\n      this.focus = f;\n      return this;\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      this.setFocus(true);\n      return this;\n    }\n  }, {\n    key: \"loseFocus\",\n    value: function loseFocus() {\n      this.setFocus(false);\n      return this;\n    }\n  }, {\n    key: \"setTip\",\n    value: function setTip(tip) {\n      this.tip = tip;\n      return this;\n    }\n  }, {\n    key: \"getTip\",\n    value: function getTip() {\n      return this.tip;\n    }\n  }, {\n    key: \"mousedown\",\n    value: function mousedown(_ref) {\n      var e = _ref.e,\n          event = _ref.event;\n      this.setSelected(true);\n      this.mousedownX = e.x;\n      this.mousedownY = e.y;\n      this.selectedLocation = {\n        x: this.getX(),\n        y: this.getY()\n      };\n      this.onMousedown(event);\n    }\n  }, {\n    key: \"onMouseselected\",\n    value: function onMouseselected() {// this.setSelected(true);\n      // this.selectedLocation = { x: this.getX(), y: this.getY() };\n    }\n  }, {\n    key: \"mouseselected\",\n    value: function mouseselected() {\n      this.setSelected(true);\n      this.selectedLocation = {\n        x: this.getX(),\n        y: this.getY()\n      };\n      this.onMouseselected();\n    }\n  }, {\n    key: \"goBack\",\n    value: function goBack(box) {}\n  }, {\n    key: \"mouseup\",\n    value: function mouseup(_ref2) {\n      var e = _ref2.e,\n          event = _ref2.event;\n      console.log('mouseup', 'ele');\n      this.mouseupX = e.x;\n      this.mouseupY = e.y;\n      var x = e.x;\n      var y = e.y;\n      var box = e.context;\n\n      if (this.gravitate) {\n        for (var i = 0; i < box.links.length; i++) {\n          var link = box.links[i];\n\n          if (this === link.nodeB) {\n            var newNodeA = box.findCloserNode(this, this.gravitate);\n            var gravitateMsg = {\n              link: link,\n              target: this,\n              oldNode: this.lastParentNode,\n              newNode: newNodeA\n            };\n\n            if (newNodeA && newNodeA.layout && newNodeA.layout.auto == true) {\n              box.layoutNode(newNodeA);\n            }\n\n            if (this.lastParentNode && this.lastParentNode.layout && this.lastParentNode.layout.auto == true) {\n              box.layoutNode(this.lastParentNode);\n            }\n\n            box.publish('gravitate', _extends({}, gravitateMsg));\n            break;\n          }\n        }\n      }\n\n      if (this.outContainer && this.isIndrag) {\n        for (var j = 0; j < box.containers.length; j++) {\n          var c = box.containers[j];\n          if (!this.inContainer(c)) continue;\n          if (this.parentContainer !== c) continue;\n\n          if (this.x + this.width < c.x || this.x > c.x + c.width || this.y + this.height < c.y || this.y > c.y + c.height) {\n            this.parentContainer.remove(this);\n            break;\n          }\n        }\n      }\n\n      if (this.inContainer && this.isOnMousedrag) {\n        for (var _j = 0; _j < box.containers.length; _j++) {\n          var group = box.containers[_j];\n          if (!this.inContainer(group)) continue;\n\n          if (x > group.x && x < group.x + group.width && y > group.y && y < group.y + group.height) {\n            if (this.parentContainer) {\n              this.parentContainer.remove(this);\n            }\n\n            group.add(this);\n            break;\n          }\n        }\n      }\n\n      if (this.layout && this.layout.auto == true) {\n        box.layoutNode(this);\n      }\n\n      this.isOnMousedrag = false;\n      this.onMouseup(event);\n    }\n  }, {\n    key: \"cancleSelected\",\n    value: function cancleSelected() {\n      this.setSelected(false);\n      this.selectedLocation = null;\n    }\n  }, {\n    key: \"onMousedown\",\n    value: function onMousedown(event) {}\n  }, {\n    key: \"onMouseup\",\n    value: function onMouseup(event) {}\n  }, {\n    key: \"onMouseover\",\n    value: function onMouseover(event) {}\n  }, {\n    key: \"onMouseout\",\n    value: function onMouseout(event) {}\n  }, {\n    key: \"onMousedrag\",\n    value: function onMousedrag(event) {}\n  }, {\n    key: \"onContextmenu\",\n    value: function onContextmenu(event) {}\n  }, {\n    key: \"contextmenu\",\n    value: function contextmenu(_ref3) {\n      var event = _ref3.event;\n      this.onContextmenu(event);\n    }\n  }, {\n    key: \"mouseover\",\n    value: function mouseover(_ref4) {\n      var e = _ref4.e,\n          event = _ref4.event;\n      this.isOnMousOver = true;\n      this.isTipVisible = true;\n      this.setFocus(true);\n      this.onMouseover(event);\n    }\n  }, {\n    key: \"mouseout\",\n    value: function mouseout(_ref5) {\n      var e = _ref5.e,\n          event = _ref5.event;\n      this.isOnMousOver = false;\n      this.isTipVisible = false;\n      this.setFocus(false);\n      this.onMouseout(event);\n    }\n  }, {\n    key: \"mousedrag\",\n    value: function mousedrag(_ref6) {\n      var e = _ref6.e,\n          event = _ref6.event;\n      this.isOnMousedrag = true;\n      var dx = e.dx;\n      var dy = e.dy;\n      var x = e.x;\n      var y = e.y;\n      var newX = this.selectedLocation.x + dx;\n      var newY = this.selectedLocation.y + dy;\n      this.setLocation(newX, newY);\n      var box = e.context;\n\n      if (this.gravitate) {\n        for (var i = 0; i < box.links.length; i++) {\n          var link = box.links[i];\n\n          if (this === link.nodeB) {\n            var newNodeA = box.findCloserNode(this, this.gravitate);\n\n            if (newNodeA != null && newNodeA !== link.nodeA) {\n              if (this.lastParentNode == null) {\n                this.lastParentNode = link.nodeA;\n              }\n\n              link.nodeA = newNodeA;\n              break;\n            }\n          }\n        }\n      }\n\n      if (this.inContainer) {\n        for (var j = 0; j < box.containers.length; j++) {\n          var group = box.containers[j];\n          if (!this.inContainer(group)) continue;\n\n          if (x > group.x && x < group.x + group.width && y > group.y && y < group.y + group.height) {\n            group.setFocus(true);\n          } else {\n            group.setFocus(false);\n          }\n        }\n      }\n\n      this.isIndrag = true;\n      this.onMousedrag(event);\n    }\n  }]);\n\n  return Element;\n}();\n\nexports.default = Element;","map":null,"metadata":{},"sourceType":"script"}